<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN" 
	"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">

<book id="architect-user-guide" lang="en">

	<bookinfo>

		<!-- $Id$ -->

		<title id="book">Power*Architect User Guide</title>

		<mediaobject>
			<imageobject id="architect_logo">
				<imagedata fileref="doc/images/architect_logo.png"
					format="PNG" />
			</imageobject>
		</mediaobject>

		<corpauthor>
			<ulink url="http://www.sqlpower.ca">SQL Power</ulink>
			Group Inc.
		</corpauthor>

		<date>Last Modified</date>

		<copyright>
			<year>2007</year>
			<holder>SQL Power Group Inc.</holder>
		</copyright>
	</bookinfo>
	<chapter id="intro-chapter">
		<title>Introduction</title>

		<para>
			Data Architects, DBAs, Analysts and Designers rely on
			state-of-the-art Data Modeling Tools to facilitate and
			simplify their data Modeling efforts, while maximizing the
			use of their resources. The Power*Architect software allows
			these busy technical professionals to perform this most
			intricate part of their job in a fraction of the time.
		</para>

		<para>
			SQL Power Group&apos;s Power*Architect is an innovative data
			modeling tool designed primarily for Data Warehouse and Data
			Mart design. It allows the designer to open multiple
			concurrent source Database connections, drag and drop source
			schemas, tables and columns into the data modeling playpen,
			and forward-engineer the resulting target database and its
			associated ETL template.
		</para>

		<para>
			The Power*Architect is a user-friendly DW data modeling tool
			created by data warehouse designers, and has many features
			geared specifically for the data warehouse architect,
			including:
		</para>

		<itemizedlist>

			<listitem>

				<para>
					Access any JDBC- or ODBC-accessible source database;
				</para>

			</listitem>

			<listitem>

				<para>
					Design every aspect of the target database Data
					Model;
				</para>

			</listitem>

			<listitem>

				<para>
					Compare the database structure of any two databases,
					highlighting the structural differences and
					generating the required DDL to synchronize;
				</para>

			</listitem>

			<listitem>

				<para>
					Compare the Data Model data structures to an
					existing target database; 
				</para>

			</listitem>

			<listitem>

				<para>
					Save a snapshot of all source systems' data structures 
					in the project file, allowing data warehouse designers
					 to evolve their target data model remotely;
				</para>

			</listitem>

			<listitem>

				<para>
					Forward engineer to Oracle, SQL Server, DB2,
					PostgreSQL and other databases;
				</para>

			</listitem>

			<listitem>

				<para>
					Forward engineer ETL Templates containing
					source-to-target data mappings;
				</para>

			</listitem>

			<listitem>

				<para>
					Invoke ETL Engine to load initial set of data into
					the target database;
				</para>

			</listitem>

			<listitem>

				<para>
					Enable easy centralized installation and updates to
					multiple end users (using
					<trademark>Java WebStart</trademark>
					technology).
				</para>

			</listitem>

		</itemizedlist>

		<para>
			Power*Architect can open multiple source databases
			concurrently, even those from competing database vendors.
			Another key feature of the Power*Architect that sets it
			apart from other data modeling tools is that it remembers
			the origin of each column, and is capable of automatically
			generating the source-to-target data mappings.
		</para>

		<para>
			Whether you're building or maintaining your Data Warehouse
			data model, the Power*Architect will provide you a complete
			view of all required database structures and will expedite
			every aspect of your data warehouse design.
		</para>

		<para>We firmly believe you can...</para>

		<sidebar>

			<para>
				Design your Data Warehouse in a fraction of the time
				with Power*Architect.
			</para>

		</sidebar>

		<epigraph>

			<para>
				Power*Architect is a versatile tool for the busy data
				warehousing practitioner.
			</para>

		</epigraph>

		<sect1 id="about-this-book">

			<title>Basic Concepts</title>

			<para>
				<emphasis>Project</emphasis>
				- a Power*Architect project consists of a view of
				multiple databases; you can load and save a Project to
				work on it at leisure.
			</para>

			<para>
				<emphasis>Driver</emphasis>
				- Most programs need a distinct driver program to
				communicate with each different type of database.
				Power*Architect uses Java-based drivers, which normally
				come from the database vendor in the form of "JAR"
				<footnote>
					<para>
						Java Archive files; these are an extension to
						the file format used by PKZip/WinZip archives
					</para>
				</footnote>
				files. You need to inform Power*Architect about each
				driver before you can use it; do this from the User
				Preferences panel, under JDBC Drivers (just click Add
				and browse to the Jar file for your driver). If you do
				not have the JDBC driver for a given database, you can
				usually obtain one from the database vendor. If that
				fails, you can find a directory of databases drivers on
				<ulink
					url="http://developers.sun.com/product/jdbc/drivers">
					Sun&apos;s web site
				</ulink>
				.
			</para>

			<para>
				<emphasis>Playpen</emphasis>
				- This is the main area of the Power*Architect window,
				in which you manipulate tables and relationships. You
				can play here to your heart&apos;s content, knowing it
				will not be saved until you ask the program to save.
			</para>

		</sect1>

		<sect1 id="who-book-is-for">

			<title>Who this book is for</title>

			<para>
				This book is a step-by-step guide on how to use the full
				capabilities of Power*Architect . It covers topics from
				how to install the Power*Architect through setting up
				database connections to engineering your data model.
			</para>

			<para>
				We assume you are familiar with basic database terms. If
				you meet any terms that are unfamiliar, please refer to
				the Glossary at the end of this book.
			</para>

			<para>
				This book also assumes you are familiar with basic
				computer operations.
			</para>

			<para>
				We also assume you have SQL Power&apos;s Power*Architect
				software installed on your computer; if not, please
				refer to the Installation Guide below.
			</para>
			
			<para>
				For the section on creating a Kettle job we assume that 
				the reader has some basic knowledge about ETL. For more 
				information about ETL look for "Building the Data Warehouse" 
				by W. H. Inmon or "The Data Warehouse Toolkit: The Complete 
				Dimensional Modeling" by Ralph Kimball and Margy Ross.
			</para>
			
		</sect1>

	</chapter>

	<chapter id="installation.guide">

		<title>Installation Guide</title>

		<section id="prereqs">

			<title>Power*Architect Prerequisites</title>
			<para>

				To run the Power*Architect you need a Java 1.5 or newer
				Java Runtime ("Java VM" or "JVM"). A current version of
				the Java VM for common platforms can be obtained from
				<ulink
					url="http://java.sun.com/javase/downloads/index.html">
					Sun Microsystems
				</ulink>
				. To ensure that your JVM is up-to-date, Apple Macintosh
				users should use Software Update (from the Apple Menu)
				while others should use the Java Updater (from, e.g.,
				the Microsoft Windows Control Panel).
			</para>

		</section>

		<section id="get_the_architect">

			<title>How to Obtain the Power*Architect Software</title>

			<para>
				Power*Architect can be obtained from the
				<ulink url="http://download.sqlpower.ca">
					download section
				</ulink>
				of the
				<ulink url="http://www.sqlpower.ca/">
					SQLPower Website
				</ulink>
				. You should only need to download one file, choosing
				the platform-appropriate distribution (Windows-Installer
				for Microsoft Windows, "DMG" for Apple Macintosh, and
				".tar.gz" for UNIX/Linux/other platforms). You should
				normally choose the download with the highest revision
				number available.
			</para>

		</section>

		<section id="how_to_install">

			<title>How to Install Power*Architect</title>

			<section id="install_win">

				<title>Microsoft Windows</title>

				<para>
					Double click on the Architect-setup-Windows-n.m.jar.
					This will launch the Microsoft Windows installer.
					Follow the on-screen instructions.
				</para>

			</section>

			<section id="install_mac">

				<title>Macintosh OS X</title>

				<para>
					Drag the architect-n.m.dmg file to the Applications
					folder
				</para>

			</section>

			<section id="install_java">

				<title>Other Platforms</title>

				<para>
					Extract the Architect-generic-n.m.tar.gz package
					into the desired directory.
				</para>

			</section>

		</section>

		<section id="how_to_run">

			<title>How to Run Power*Architect</title>

			<section id="run_win">

				<title>Microsoft Windows</title>

				<para>
					From the start menu, select All Programs. Then
					select the Power Loader Suite program group. Finally
					click on the Power Architect shortcut.
				</para>

			</section>

			<section id="run_mac">

				<title>Macintosh OS X</title>

				<para>
					From the Finder, select Applications, then select
					Power*Architect. To enable launching of the
					Architect directly from the Dock, either drag the
					image there or, while it is running, Apple-Click on
					the running icon and select Keep In Dock.
				</para>

			</section>

			<section id="run_java">

				<title>Other Platforms</title>

				<para>
					In the directory into which you extracted the
					Architect, run the command
					<command>java -jar architect.jar</command>
					. If you have a visual browser, you may be able to
					launch the architect by clicking (or
					double-clicking) on the architect.jar file.
				</para>

			</section>

		</section>

	</chapter>

	<chapter id="How_to_use">

		<title>How to Use the Power*Architect</title>

		<section id="Architect_UI">

			<title>Power*Architect User Interface</title>

			<para>
				When you start the Power*Architect, you will see the
				Project window, shown below, which is the main view area
				and starting point for actions.
			</para>

			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="doc/images/basicui.png"
							format="PNG" width="4in" />
					</imageobject>
				</inlinemediaobject>
			</para>

			<para>
				<emphasis>Database Tree</emphasis>
				- This is where you can add, maintain and explore
				imported connections. It uses a tree-node dropdown
				method. Therefore to explore inner components, you can
				expand components within this container as needed.
			</para>

			<para>
				<emphasis>Playpen</emphasis>
				- This is the main area of the window, in which you
				manipulate tables and relationships. You can play here
				to your heart's content, knowing it will not be saved
				until you ask the program to save.
			</para>

			<para>
				<emphasis>Playpen Components</emphasis>
				- These are the components that can go into the playpen.
				The playpen components are Tables and Relationships.
			</para>

			<para>
				<emphasis>Zoom Tools</emphasis>
				- These tools allow you to control the magnification 
				level of components display.
			</para>

			<para>
				<emphasis>Delete</emphasis>
				- This will delete the selected component(s).
			</para>

			<para>
				<emphasis>Create/Maintain Playpen Components</emphasis>
				- This is discussed in
				<link linkend="diagram_components">
					Using Components
				</link>
				below.
			</para>

		</section>

		<section id="User_Prefs">

			<title>Setting the User Preferences</title>

			<para>
				When getting started, you need to set up some files and
				drivers to use the full functionality of the
				Power*Architect. If you have not already done so
				already, please go to "User Preferences" under the File
				Menu to configure the Power*Architect. This will pop up
				a dialog (shown below) where you can specify your file
				locations.
			</para>

			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata fileref="doc/images/user_prefs.png"
							format="PNG" width="4in" />
					</imageobject>
				</inlinemediaobject>
			</para>

			<para>
				The pl.ini file stores the database connections that you
				set up (see JDBC Drivers on page 8). If you leave this
				location blank, the Architect program will prompt you to
				use a default location when you start it up. If you have
				a pl.ini file from other SQL Power applications you
				should generally use the same file, as doing so will
				save you from having to re-enter all your database
				connection information. The next two settings are for log
				files that will be written when you	use the ETL and 
				Forward Engineering functions of the application. The 
				next setting controls the operations of graphics in the 
				PlayPen. Turning "antialiased rendering" on may give 
				better display of the graphical	database layouts shown 
				in the PlayPen, but may use more CPU time in the process.
				The error reporting setting can be turned on to send 
				SQL Power error reports when they occur. The last setting,
				Show Welcome Screen, can be set to turn the welcome screen
				on or off when starting Power*Architect.
			</para>

		</section>

		<section id="JDBC_Drivers">

			<title>JDBC Drivers</title>

			<para>
				Besides setting up these file locations, you must also
				tell the Power*Architect about the JDBC drivers you wish
				to use. JDBC Drivers are needed to access most
				databases, and are distributed in "JAR file" format.
				Click on the "JDBC Drivers" tab and click Add... to
				specify the location of a JDBC driver jar file; if it is
				valid, the system will list the names of any Driver
				classes found in it, as shown below (note that "ojdbc"
				stands for Oracle&apos;s JDBC driver, whereas "ODBC" is
				Microsoft&apos;s technology for database access).
			</para>

			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/jdbc_user_prefs.png" format="PNG"
							width="4in" />
					</imageobject>
				</inlinemediaobject>
			</para>

			<para>
				Note: The tie-in between Drivers and Connections might
				seem a bit indirect if you are not used to using Java
				JDBC. In this section of the User Preferences you are
				telling the Power*Architect where the drivers are so
				that they can be used when nescessary.
			</para>

			<itemizedlist>
				<listitem>
					<para>
						On the left, there is a list of drivers. By
						clicking on an item in the list, you can edit
						its properties in the text fields to the right.
					</para>
				</listitem>

				<listitem>
					<para>
						The "Name" field is used to assign a name to the
						item in the list. These names will also be used
						to assign a type to a new connection that you
						are defining.
					</para>
				</listitem>

				<listitem>
					<para>
						The "Driver Class" field is the class name of
						the driver.
					</para>
				</listitem>

				<listitem>
					<para>
						The "Connection String Template" field is used
						to define a URL template. The URL template is
						used by the Power*Architect to create a URL that
						is used to attempt a database connection. The
						pattern that the string must conform to is not
						trivial but is made up of two simpler parts,
						literals and variables.
					</para>

					<para>
						Literals are enterd like normal text but may not
						contain angle brackets (&lt; or &gt;) because
						they are reserved for defining variables.
						As their name implies, literals appear in the
						URL in the same position and way they appear in
						the template.
					</para>

					<para>
						Variables are used to make it easier for things
						that change often to be changed, such as the
						schema or datbase name you wish to connect to.
						They are defined in the template by
						&lt;variable_name
						:default_value&gt;. Once a variable is defined
						in the template, a field labeled with the
						variable's name will appear below with the
						default value in it just below the template as a
						preview to what you will later be able to modify
						in "Connection Properties".
					</para>
					
					<para>
						Note: Default values are often useful,
						but are optional. If you do not want a
						variable to have a default value, define
						it as &lt;variable_name&gt;. The default
						value for these variables is blank.
					</para>

					<para>
						For example, if we wanted to connect to a
						Microsoft SQL Server database, the URL template
						might look like
						"jdbc:sqlserver://&lt;Hostname&gt;:&lt;Port:1433&gt;".
						The URL this template will output is
						"jdbc:sqlserver://:1433" where the 1433 was a
						default value. If we were to enter "localhost"
						in the Hostname field, we would get the URL
						"jdbc:sqlserver://localhost:1433". By defining
						the "Hostname" variable, we make it easier and
						quicker to connect to a generic SQL Server
						instance. SQL Server databases listen to port
						1433 by default but can be configured to listen
						to others so, by giving the variable this
						default, we can have the most common value
						inserted automatically while allowing us to
						modify what is in the field to change the port
						in specific cases.
					</para>
				</listitem>

				<listitem>
					<para>
						If you click on the "Kettle" tab, there will be
						a drop-down menu where you can specify the type
						of Kettle connection to associate with the
						selected item. If you do not use Kettle, do not
						worry about this setting because it is only
						nescessary when you wish to create a Kettle job
						for ETL.
					</para>
				</listitem>

				<listitem>
					<para>
						The "Add JAR..." and "Remove JAR" buttons are
						used to point the Power*Architect to the actual
						locations of the JAR files that contain the
						proper JDBC Driver. Once, you select a JAR file,
						if there is a valid driver in it, a file tree
						will appear in the area below the buttons. This
						is a representation of the JAR file and its JDBC
						contents. Select the driver you wish to use and
						click the "OK" button at the bottom.
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="example">

			<title>A Basic Example</title>

			<para>
				This section will show you how to set up
				<footnote>
					<para>
						Assumes you have used some vendor-specific
						external tool to create a new database.
					</para>
				</footnote>
				a simple database "from scratch", just to get you
				started using the tools, without modifying any live
				data. If you follow the example literally, you will
				create a trivial "customer and orders database".
			</para>

			<section id="example_setting_up_databases">
			
				<title>Setting Up Databases</title>

				<orderedlist>

					<listitem>

						<para>
							Setup Driver. Select File-&gt;User
							Preferences and select the JDBC Drivers tab.
							Select the database connection type you wish
							to use from the list on the left. If there
							is already a driver for the connection type
							you wish to use, click OK and go on to the
							next step. Otherwise, click the Add button,
							navigate to where you have the driver Jar
							file installed, and click OK.
						</para>

					</listitem>

					<listitem>

						<para>
							Create a Connection. In the Database Tree
							section of the main window, right click and
							choose Add Source Connection-&gt;New
							Connection. For this example you can use a
							name like SampleDB, for both the Connection
							Name and the Database name (these names do
							not have to be the same, but we&apos;ll keep
							them the same for simplicity). If you select
							the JDBC Driver before you type the database
							name, then as you type the Database name, it
							will be added to the DB URL, so you
							don&apos;t have to type it an extra time.
							Fill in all the fields and click OK.
						</para>

					</listitem>

				</orderedlist>
				 
			</section>
			 
			<section id="example_designing_a_database">
			
				<title>Designing a Database</title>

				<para>
					You are now ready to design some tables. For this
					example, we will create the Customer and Orders
					table shown here.
				</para>

				<orderedlist>

					<listitem>

						<para>
							Click on the New Table icon at the right
							side. The cursor will change to a crosshair.
							Move the cursor near the left of the Playpen
							area, and click. A "New Table" will appear.
						</para>

					</listitem>

					<listitem>

						<para>
							Double click on the title, and the Table
							Properties Dialog will appear. Rename this
							table to Customer, and the Primary Key to
							Customer_PK.
						</para>

					</listitem>

					<listitem>

						<para>
							Click on the Insert Column icon, and a "New
							Column" will appear. When the new column is
							created a property window will appear for
							it. Rename the column to ID and make it part
							of the primary key.
						</para>

					</listitem>

					<listitem>

						<para>
							Insert additional columns for Firstname,
							Lastname, Address, City, Province, Country
							Code
							<footnote>
								<para>
									There is an ISO standard, ISO-3166,
									which specifies a two-letter code
									(and a rarely-used three letter
									code) for every country of the
									world: us for the United States, ca
									for Canada, and so on. Some
									developers like to use these in the
									Country field of a database, as we
									are doing here.
								</para>
							</footnote>
							and Postal Code. The table should look
							something like the following:
						</para>
						
						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/SimpleExample1.png" format="PNG"
									width="4in" />
							</imageobject>
						</mediaobject>

					</listitem>

					<listitem>

						<para>
							Create a second table, and name it Orders.
						</para>

					</listitem>

					<listitem>

						<para>
							Create columns named Id (in the primary
							key), Quantity, and Total Amount. Your
							project should now look something like the
							following:
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/SimpleExample2.png" format="PNG"
									width="4in" />
							</imageobject>
						</mediaobject>
					</listitem>

					<listitem>

						<para>
							We need a relationship between these tables.
							An order should have a foreign key that
							refers to the customer. Click the "New
							Non-Identifying Relationship" icon. Select
							the Order table, then the Customer table,
							and a link will be drawn as shown. Click on
							this link and the keys that take part in the
							relationship will be highlighted in red.
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/SimpleExample3.png" format="PNG"
									width="4in" />
							</imageobject>
						</mediaobject>
					</listitem>

				</orderedlist>
				
			</section>
			
			<section id="example_forward_engineer">
			
				<title>Forward Engineer</title>

				<orderedlist>

					<listitem>

						<para>
							If you&apos;re happy with the database
							layout (you can always change it later),
							it&apos;s time to create the database. Click
							on the Forward Engineer button. You should
							see a window similar to the following:
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/SimpleExample4.png" format="PNG"
									width="4in" />
							</imageobject>
						</mediaobject>
					</listitem>

					<listitem>
						<para>
							Set the "Create in" database to be the
							source connection we defined earlier. Set
							the database type to be the type that was
							set in the user preferences. Fill in the
							remaining fields based on the database type
							that was selected and press ok. You should
							see a window similar to:
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/SimpleExample5.png" format="PNG"
									width="4in" />
							</imageobject>
						</mediaobject>
					</listitem>

					<listitem>

						<para>
							If this looks plausible, click Execute, and
							the tables and their relationship will be
							created. Congratulations! You have now
							created a simple database using the visual
							tools in Power*Architect.
						</para>

					</listitem>

				</orderedlist>
				
			</section>
			
			<section id="example_comparing_data_models">
			
				<title>Comparing Data Models</title>

				<para>
					Suppose that after using this database, you realize
					that there should be a "shipping amount" field in
					the Order table (we never promised this would be
					completely realistic example).
				</para>

				<orderedlist>

					<listitem>

						<para>
							Select the Order table by clicking on its
							title.
						</para>

					</listitem>

					<listitem>

						<para>
							Click the Insert Column field and, as
							before, rename the New Column, this time to
							Shipping_Amount. Change its type to
							Decimal(10,2).
						</para>

					</listitem>

					<listitem>

						<para>
							Now we need to compare two different Data
							Models, the original database and the
							current project. Click the Compare DM icon.
							Set the "Older" to Physical Database
							SampleDB (you may need to change the Schema
							to Public). Set the "Newer" to "Current
							Project" (since it is now newer than the
							database you created in Step 6). Set the
							output format to SQL.
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/SimpleExample6.png" format="PNG"
									width="4in" />
							</imageobject>
						</mediaobject>
					</listitem>

					<listitem>

						<para>
							Click Start. You should see the SQL Preview
							window again, but this time with just an ADD
							for the column you just added:
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/example_10.png" format="PNG" width="4in" />
							</imageobject>
						</mediaobject>
					</listitem>

					<listitem>

						<para>
							Click Execute, and the new column will be
							added to your database table.
						</para>

					</listitem>

				</orderedlist>

				<para>
					When you exit the program, it will ask to save your
					project. Since you might want to alter this in
					future, to experiment with some of the other tools
					without damaging any live data, you may wish to save
					the Project file.
				</para>

				<para>
					The remainder of this document provides a more
					comprehensive explanation of the various functions
					that Power*Architect offers.
				</para>
				
			</section>
			
		</section>

		<section id="diagram_components">

			<title>Using Diagram Components</title>

			<section id="new_table">

				<title>Creating New Tables</title>

				<para>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/new_table16.png" format="PNG" />
						</imageobject>
					</inlinemediaobject>
					There are several ways to create new tables in
					Power*Architect. The first way is to click on the
					New Table Icon on the sidebar menu. The cursor turns
					into a "+" cursor indicating the mode change. Simply
					click on the playpen on the spot you desire to place
					the new table at. The second method to create a
					table is to right click on the playpen and select
					the "New Table" option. A newly created table will
					then be placed at the point of the right click. A
					third way is to type the letter T with the mouse
					over the playpen.
				</para>

			</section>

			<section id="edit_table">

				<title>Editing Tables</title>

				<para>
					To edit a table, right click on the table title and
					select "Table Properties". This pops up the Table
					Properties dialog.
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/Table_Properties.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>In this dialog, you can:</para>

				<itemizedlist>

					<listitem>

						<para>Change the name of the table</para>

					</listitem>

					<listitem>

						<para>
							Rename the primary key section of the table
						</para>

					</listitem>

					<listitem>

						<para>Add comments/notes about the table</para>

					</listitem>

				</itemizedlist>

			</section>

			<section id="new_column">

				<title>Creating New Columns</title>

				<para>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/new_column16.png" format="PNG" />
						</imageobject>
					</inlinemediaobject>
					First select the table the new column will be placed
					in. Click on the "Insert Column" button and a column
					is created in the selected table. Another way to add
					a new column is to right click on a table and select
					the "New Column" option. The new column will be
					added to the table below the selected column. It
					will be placed at the bottom of the table if no
					columns are selected. If a table has existing
					columns in the primary key and you wish to create
					new columns within the primary key, select a column
					that is already in the desired primary key and then
					create a new column. The newly created column will
					be placed within the primary key as well.
				</para>

			</section>

			<section id="edit_column">

				<title>Editing Columns</title>

				<para>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/edit_column16.gif" format="PNG" />
						</imageobject>
					</inlinemediaobject>
					Select the desired column, right click and select
					"Column Properties...". The Edit Column Properties
					dialog pops up. Or you can select the column and
					click the "Edit Column" button on the Playpen
					toolbar.
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/Column_properties.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>In this dialog, you can:</para>

				<itemizedlist>

					<listitem>

						<para>Rename the column</para>

					</listitem>

					<listitem>

						<para>
							Change the type of data the column holds
						</para>

					</listitem>

					<listitem>

						<para>Set the precision of the data</para>

					</listitem>

					<listitem>

						<para>Set the scale</para>

					</listitem>

					<listitem>

						<para>
							Indicate if the column is in the primary key
							or not
						</para>

					</listitem>

					<listitem>

						<para>
							Indicate if the column should handle null
							information or not
						</para>

					</listitem>

					<listitem>

						<para>
							Indicate if auto increment is allowed or not
						</para>

					</listitem>

					<listitem>

						<para>
							Add additional comments about the column
						</para>

					</listitem>

					<listitem>

						<para>Set a default value for the column</para>

					</listitem>

				</itemizedlist>

				<para>
					A special feature of the Power*Architect is that if
					a column orginated from a database, the
					Power*Architect is able to remember the database and
					table it orginated from.
				</para>

			</section>

			<section id="drag_columns">

				<title>Dragging Columns</title>

				<para>
					The Power*Architect allows you to drag columns
					within a table&apos;s key and from table to table
					freely. Simply select the desired columns and drag
					them into the desired destination. For now, only one
					column can be moved at a time.
				</para>

			</section>

			<section id="create_relationship">

				<title>
					Creating Non-Identifying and Identifying
					Relationships
				</title>

				<para>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/new_id_relationship16.png"
								format="PNG" />
						</imageobject>
					</inlinemediaobject>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/new_nonid_relationship16.png"
								format="PNG" />
						</imageobject>
					</inlinemediaobject>
					To create a relationship, select the desired type of
					relationship on the Playpen ToolBar. The
					non-identifying relationship icon is
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/new_nonid_relationship16.png"
								format="PNG" />
						</imageobject>
					</inlinemediaobject>
					(keyboard shortcut is shift+R). The identifying
					relationship icon is
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/new_id_relationship16.png"
								format="PNG" />
						</imageobject>
					</inlinemediaobject>
					(shortcut key is R). The cursor changes to the "+"
					cursor to indicate the mode change. First click on
					the parent table and then click on the child table.
					Once this has been done, the relationship will be
					created, and will appear as a link between the two
					tables.
				</para>
				<para>	
					If a column in the child table shares the name of 
					the primary key of the parent table, the relationship
					will map to the existing column in the child table.	
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="doc/images/Hijacked_Column_Relation.PNG"
								format="PNG" 
								width="5in" />
						</imageobject>
					</inlinemediaobject>
				</para>
				<para>
					If a column exists in the child table that has the
					same name as the primary key in the parent table
					but a different data type a new column will be
					created.
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="doc/images/New_Column_Relation.PNG"
								format="PNG"
								width="5in" />
						</imageobject>
					</inlinemediaobject>
				</para>

			</section>

			<section id="edit_relationship">

				<title>Editing a Relationship</title>

				<para>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/edit_relationship16.png" format="PNG" />
						</imageobject>
					</inlinemediaobject>
					Right click on the relationship you wish to edit.
					Choose the "Relationship Properties" options. This
					can also be done by selecting the relationship and
					clicking on the relationship properties button. In
					both cases, the Relationship Properties dialog will
					appear.
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/relationship_properties.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>In this dialog, you can:</para>

				<itemizedlist>

					<listitem>

						<para>Rename the relationship</para>

					</listitem>

					<listitem>

						<para>Choose the relationship type</para>

					</listitem>

					<listitem>

						<para>
							Change the primary key end cardinality
						</para>

					</listitem>

					<listitem>

						<para>
							Change the foreign key end cardinality
						</para>

					</listitem>

				</itemizedlist>

			</section>

			<section id="multiple_selection">

				<title>Selecting Multiple Items in the Playpen</title>

				<para>
					There are two ways to select multiple items in the
					playpen. One way is to hold down the shift key or
					the ctrl key as more items are being selected. The
					alternative method is to use the selection box.
				</para>

			</section>

			<section id="move_object">

				<title>Relocating Objects in the Playpen</title>

				<para>
					The Power*Architect allows diagram objects to move
					around freely in the playpen. To do so, first select
					the items you want to move in the Playpen. Click and
					hold on one of the selected item and drag the items
					to a desired spot on the playpen.
				</para>

			</section>

			<section id="delete_object">

				<title>Deleting Diagram Components</title>

				<para>
					Select the desired diagram components on the playpen
					and click on the delete items button on the Playpen
					Toolbar. It is also possible to delete the selected
					items by right clicking on one of the components and
					selecting "Delete Selected" or simply pressing the
					delete keys with the unwanted items selected.
				</para>

			</section>

		</section>

		<section id="db_usage">

			<title>Database Usage in Power*Architect</title>

			<section id="new_connection">

				<title>
					Adding a New Connection to the Power*Architect
				</title>

				<para>
					To add a new connection, go to "Add Connections"
					under "Connections" menu and select "New
					Connection..". The other method is to right click a
					white space on the Database Tree and select "New
					Connection" under "Add Connections". Both ways open
					up this dialog:
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/database_conn_window.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>
					You must know which type of database you wish to use
					before you can connect to a database. When you have
					selected the database type, the Connect Options will
					change to allow you to enter the particular
					parameters that the given database driver needs. If
					you are using one of the fully-supported drivers,
					then as you enter these parameters, they will be
					added into the "JDBC URL" field in the order that
					the Java driver expects to see them (this string is
					sometimes called a "db URL" in Java terminology). In
					the example below, we&apos;ve selected the
					PostgreSQL driver and entered the hostname and
					database name (the "port number" was already filled
					in; do not change this unless the database server
					software has been reconfigured to use a different
					value).
				</para>
				
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/database_conn_window_setup.png" format="PNG" width="4in" />
					</imageobject>
				</mediaobject>

				<para>
					When you are finished, press the OK button. Any new
					connection will automatically be added in the
					user-preference.
				</para>

			</section>

			<section id="add_connection">

				<title>Adding an Existing Connection</title>

				<para>
					Right click on empty space in the Database Tree and
					go to "Add Connection" to see a list of all database
					connections that were previously stored on the
					Architect.
				</para>

			</section>

			<section id="edit_connection">

				<title>Editing Database Connection Properties</title>

				<para>
					Select the database connection you wish to change
					and go to "Connections" menu and select the option
					"Connection Properties.." which leads you to the
					Connection Setting dialog. An alternate solution is
					to right click on the database and select
					"Connection Properties..." option.
				</para>

			</section>

			<section id="remove_connection">

				<title>Removing a Database Connection</title>

				<para>
					Select the database connection you wish to change
					and go to "Connections" and select the option
					"Remove Connection". Right clicking on the
					database connection and selecting "Remove
					Connection" will perform the same action. 
					Connections can only be removed if they are
					not being used as sources in the play pen.
				</para>

			</section>

			<section id="dbtree_nav">

				<title>Navigating through the Database Tree</title>

				<para>
					The Database Tree works like a tree-dropdown model.
					Clicking on any item will cause the component to
					expand display the items under that specific
					component. Each item will have an unique icon beside
					its name to identify the type of object it is. The
					table below shows what each icon means:
				</para>

				<table id="dbtree_icons">

					<title>Database Tree Icons</title>

					<tgroup cols="2">

						<thead>

							<row>
								<entry>Icon</entry>
								<entry>Representation</entry>
							</row>

						</thead>

						<tbody>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Database16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Database</entry>
							</row>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Catalog16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Catalog</entry>
							</row>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Schema16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Schema</entry>
							</row>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Owner16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Owner</entry>
							</row>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Table16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Table</entry>
							</row>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Column16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Column</entry>
							</row>
							
							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/ExportedKey16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Exported Key</entry>
							</row>

							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/ImportedKey16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Imported Key</entry>
							</row>
							
							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Index16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Index</entry>
							</row>
							
							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Index_key16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Index Key</entry>
							</row>
							
							<row>
								<entry>
									<inlinemediaobject>
										<imageobject>
											<imagedata
												fileref="src/icons/Index_unique16.png" format="PNG" />
										</imageobject>
									</inlinemediaobject>
								</entry>
								<entry>Unique Index</entry>
							</row>

						</tbody>

					</tgroup>

				</table>

			</section>

			<section id="dbtree_move">

				<title>Moving Items from the Database Tree</title>

				<para>
					To copy items from the Database Tree to the playpen,
					simply select the desired items in the tree and drag
					them onto the playpen. Depending on the size of the
					items dragged onto the playpen, it will take some
					time to load.
				</para>

			</section>

		</section>

		<section id="find">

			<title>Find/Replace Function</title>

			<section id="find.what">

				<title>What It Does</title>

				<para>
					This functions searches the whole playpen for any
					relevant matches with the search constraints and
					displays the resulting matches. The user can request
					for those items to be focused on the screen.
				</para>

				<mediaobject>
					<imageobject>
						<imagedata fileref="doc/images/find.png"
							format="PNG" width="4in" />
					</imageobject>
				</mediaobject>
			</section>

			<section id="find.use">

				<title>How to Use Find / Replace Function:</title>

				<para>
					Go to "Edit" under the menu bar and click on
					Find/Replace option. This shows the Find/Replace
					function. In this window, enter the search
					constraints and press "OK" when you are finished.
					This will popup a new window with your search result
					in a chart format.
				</para>

				<para>
					You can rename the component by selecting the column
					in the list and clicking on "Rename Component". You
					can also have Power*Architect focus on a certain
					component by selecting the component in the list and
					press the "Show in Playpen" button.
				</para>

			</section>

		</section>

		<section id="profiling">
			<title>Profiling</title>
			<para>
				<inlinemediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/information24.png" format="GIF"
							width="0.25in" />
					</imageobject>
				</inlinemediaobject>
				Profiling displays a summary of the data found in a
				database. The summary can be used for such tasks as;
				database optimization and data migration.

				Select the columns and tables that you wish to profile
				from the database tree on the left hand side of the
				screen. Then activate the profile feature by either
				going to the "Profile" menu and selecting "Profile...",
				or by right clicking on a selected item and select
				"Profile.." from the context menu, or by selecting the
				Profile Icon in the Advanced Tool icon bar.

				If there is still an existing Profile window, the new
				profiling results will be added on to the existing
				window, otherwise, the resulting profile will be
				displayed in a new window.
			</para>

			<section id="profiling.tableView">
				<title>Table View</title>
				<para>
					In the profiling window, the profiling information
					is sortable. Simply click on the column header and
					it will sort the data by ascending or decesending
					order.

					In addition, if you place your mouse pointer over a
					most frequent cell, it will display the value and
					frequency of the most recurring items in the column.

					You can narrow down the results by using the search
					bar on the top right corner of the profile window.

					To delete columns from the profile result, simply
					select the desired columns and press the "Delete"
					button.

					As for refreshing the data within the profile table,
					select any one of the columns within the table and
					hit "Refresh". This will update the contents of the
					whole table.

					If you wish the save the profile results, you can
					highlight the desired columns to save, and click the
					"Save" button. If no column is selected, the
					Architect will save all the displayed results. You
					have the option to save it in CVS, PDF or HTML
					format.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="doc/images/profileTable.png"
							format="PNG" width="4in" />
					</imageobject>
				</mediaobject>
			</section>

			<section id="profiling.graphView">
				<title>Graph View</title>
				<para>
					Besides the tabular view, there is also the
					graphical view. Simply click on "Graph View" tab on
					the top to switch. On the left side of this window,
					you can select which column you want to profile. In
					the middle, it will show statistics about that
					particular column. It will also display the most
					frequent 'n' values and its frequency within the
					table. The pie chart on the right displays the
					portionality of the most frequent 'n' values in the
					column (the value of 'n' can be set in the "Project
					Settings" under the "File" menu).
				</para>
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/profilePieChart.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
			</section>
		</section>

		<section id="forward_engineer_and_compare_dm">

			<title>Forward Engineering and Compare Data Model</title>

			<para>
				These two functions are similar; they both involve using
				the PlayPen (usually) and generating SQL. The Forward
				Engineer function always creates a SQL script to
				generate a database identical with the complete current
				project (current PlayPen contents). The Compare DM
				function can output either an English-language
				description or a SQL script describing the differences
				between two databases, or stored projects, or one of
				these and the PlayPen.
			</para>

			<section id="forward_engineer">

				<title>Forward Engineering</title>

				<section id="forward_engineer.what">

					<title>What It Does</title>

					<para>
						Forward Engineering creates a SQL Script that
						can be run to update or put the components of
						the current Playpen into a database
					</para>

				</section>

				<section id="forward_engineer.how">

					<title>How To Use Forward Engineering</title>

					<para>
						<inlinemediaobject>
							<imageobject>
								<imagedata
									fileref="src/icons/fwdSQL16.png" format="PNG" />
							</imageobject>
						</inlinemediaobject>
						First set the target connection to the database
						you want the changes to be made in. Then go to
						"Tools" and click "Forward Engineering". Another
						way is to press the "Forward Engineering" button
						at the top. This pops up a dialog that looks
						similar to the one below:
					</para>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="doc/images/forward_engineer.png" format="PNG"
								width="4in" />
						</imageobject>
					</mediaobject>
					<para>
						Fill in the fields as necessary and hit "OK"
						when you are done. Depending on the situation, a
						dialog warning you of possible side-effects of
						creating the script may pop up. Finally a script
						that would create data structure currently in
						the Playpen will be displayed. It is the same
						dialog used in CompareDataModel-Part 2- In SQL
						Script.
					</para>

					<mediaobject>
						<imageobject>
							<imagedata
								fileref="doc/images/preview_sql.png" format="PNG" width="4in" />
						</imageobject>
					</mediaobject>
				</section>

			</section>

			<section id="compare_dm">

				<title>Compare Data Model Function</title>

				<section id="compare_dm.what">

					<title>What It Does</title>

					<para>
						The Compare DataModel Function takes two
						databases or Power*Architect projects (or one of
						each) or the current PlayPen, and compares and
						contrasts the structure of the two
						database/projects.
					</para>

				</section>

				<section id="compare_dm.how">

					<title>
						How to use Compare Data Model Function:
					</title>

					<section id="compare_dm.how.1">

						<title>Part 1</title>

						<para>
							<inlinemediaobject>
								<imageobject>
									<imagedata
										fileref="src/icons/compare_DM16.png" format="PNG" />
								</imageobject>
							</inlinemediaobject>
							To start the Compare Data Model Function,
							either go to "Tools" and click "Compare Data
							Model" or just click the "Compare Data
							Model" icon on the project toolbar. This
							will bring up the main Compare Data Model
							window. Here select the source and target
							models you want to compare and contrast. You
							can choose either the current playpen, an
							existing database or select a saved project
							file function. If one of or both the source
							and the target has invalid models, the start
							button will not enable. The similarities and
							differences can be displayed either in SQL
							Script language or in English.
						</para>

						<mediaobject>
							<imageobject>
								<imagedata
									fileref="doc/images/compare_dm.png" format="PNG" width="4in" />
							</imageobject>
						</mediaobject>
					</section>

					<section id="compare_dm.how.2">

						<title>Part 2</title>

						<section id="compare_dm.how.2.english">

							<title>English Descriptions</title>

							<para>
								If this option is selected, a
								side-by-side document will be displayed
								stating the similarlities and
								differences of the source and target in
								plain English. If the "Suppress
								Similarities" checkbox is selected then
								similarities will not be shown and only
								the differences will be displayed. The
								left text gives English descriptions to
								make the source database look like the
								target database. In addition to the
								text, they are also colour coded. You
								can copy the text to the clipboard by
								pressing the copy button, or save the
								results to a text file. The table below
								explains what each colour means.
							</para>

							<table
								id="compare_dm.how.2.english.colour_codes">

								<title>
									Compare Database Model Colour Codes
								</title>

								<tgroup cols="2">

									<thead>

										<row>
											<entry>Colour</entry>
											<entry>
												Explanation of the
												Colour Code
											</entry>
										</row>

									</thead>

									<tbody>

										<row>
											<entry id="black_colour">
												Black
											</entry>
											<entry>
												This component exists in
												both databases
											</entry>
										</row>

										<row>
											<entry id="green_colour">
												Green
											</entry>
											<entry>
												This component only
												exists in this database
												but not the other
											</entry>
										</row>

										<row>
											<entry id="red_colour">
												Red
											</entry>
											<entry>
												This component does not
												exist on this database
												but exists on the other
											</entry>
										</row>

										<row>
											<entry id="blue_colour">
												Blue
											</entry>
											<entry>
												This component is a
												column and is on
												different keys in the
												two databases
											</entry>
										</row>

									</tbody>

								</tgroup>

							</table>

						</section>

						<section id="compare_dm.how.2.SQL">

							<title>In SQL Script</title>

							<para>
								If this option is chosen, this will
								produce a SQL Script in the SQL dialect
								chosen in Step 1 to make the source
								database look like the target database.
								You can either copy the results to the
								clipboard, or save the results in a text
								file. If the source has a valid
								connection database, the Execute button
								will enable and you can directly execute
								the changes. If the source does not have
								a valid connection, the execute button
								is disabled.
							</para>

						</section>

					</section>

				</section>

			</section>

		</section>

		<section id="autolayout">

			<title>Autolayout</title>

			<section id="autolayout.what">

				<title>What It Does</title>

				<para>
					It displays the selected tables (or all tables) in
					an organized manner.
				</para>

			</section>

			<section id="autolayout.how">

				<title>How to Use Autolayout:</title>

				<para>
					<inlinemediaobject>
						<imageobject>
							<imagedata
								fileref="src/icons/auto_layout16.gif" format="GIF" />
						</imageobject>
					</inlinemediaobject>
					Select the tables on the playpen that you want to
					organize and hit the autolayout button at the top.
					If one or zero tables are selected, the program will
					autolayout every table in the playpen. Note that the
					layout algorithm may produce a few surprises when
					run with a small number of tables; it works best for
					a large or medium-sized collection of tables.
				</para>

			</section>

		</section>

		<section id="SQLRunner">

			<title>SQLRunner</title>

			<section id="SQLRunner.what">

				<title>What It Does</title>

				<para>
					SQLRunner is a "fall-back" tool that lets you work
					at the raw SQL command level. This is an advanced
					topic and should only be used by (or made available
					to) those familiar with the intricacies of SQL
					commands and the details of your database; like a
					sharp knife, this tool is very useful in the hands
					of a skilled chef, but a slip of the fingers here
					can be quite messy...
				</para>

				<para>
					SQLRunner was written by Ian Darwin, and is
					distributed under a liberal free-software,
					open-source license which permits its inclusion in
					programs such as Power*Architect.
				</para>

			</section>

			<section id="SQLRunner.how">

				<title>How to Use SQLRunner</title>

				<para>
					SQLRunner is started from the menu entry under the
					Tools menu, and begins with the GUI window shown
					below. The first thing you should do is select which
					database connection you wish to use. The list of
					Connections is the same as the main program uses, as
					set up in the JDBC Connections window.
				</para>

				<para>
					The basic steps to using SQLRunner are to type a
					command in the top (SQL Command) window and click
					the Run button; the results are displayed in the
					bottom (SQL Results) window. To save you some
					typing, there is a "Statement Template" mechanism
					that will insert a template for SELECT, INSERT or
					UPDATE SQL statements (just select the template you
					want and click "Apply Template" and the template
					will replace the current Input Statement.
				</para>

				<mediaobject>
					<imageobject>
						<imagedata fileref="doc/images/sqlrunner.png"
							format="PNG" width="4in" />
					</imageobject>
				</mediaobject>
				<para>
					The command can actually be one of two kinds: either
					one of a half-dozen escape commands listed below,
					or, anything that is valid input to your
					database&apos;s command interface (e.g., programs
					such as psql or SQL*Plus™).
				</para>

				<table id="SQLRunner.escape_chars">

					<title>SQLRunner Escape Characters</title>

					<tgroup cols="2">

						<thead>

							<row>
								<entry>Escape Sequence</entry>
								<entry>Action</entry>
							</row>

						</thead>

						<tbody>

							<row>
								<entry>\dt</entry>
								<entry>
									Describe list of all tables
								</entry>
							</row>

							<row>
								<entry>\dtT</entry>
								<entry>
									Describe column names of table named
									T
								</entry>
							</row>

							<row>
								<entry>\dmX</entry>
								<entry>
									Set the mode, where X is the first
									letter of the mode (t for text, s
									for SQL, h for HTML or x for XML;
									not needed in the embedded version
									because the GUI has a control for
									this)
								</entry>
							</row>

							<row>
								<entry>\oF</entry>
								<entry>
									Send output to the given file
									instead of the screen (though you
									can usually just view the output and
									copy-and-paste to save parts of it
									into a file; does not work in GUI
									versions).
								</entry>
							</row>

							<row>
								<entry>\q</entry>
								<entry>
									Exit the program (not supported in
									embedded versions).
								</entry>
							</row>

						</tbody>

					</tgroup>

				</table>

				<para>
					SQL Statements are entered one at a time, can be
					more than one line long, and need not end with a
					semicolon. These statements are not interpreted by
					SQLRunner itself, so anything that the given
					database and driver accepts can be used. For
					example, with Oracle™, you can use PL*SQL™
					statements. With most drivers you should be able to
					use stored procedures. Each SQL statement is
					executed in its own transaction context, that is,
					changes are committed immediately (so be careful!).
				</para>

			</section>

			<section id="SQLRunner.results">

				<title>Output (Results) Window</title>

				<para>
					Command Output in the chosen format (see below)
					appears in the SQL Output window. A scrollbar will
					appear if the information cannot all be seen at
					once.
				</para>

				<para>
					A visual indication of the success or failure of the
					command is displayed below the output: green for
					success, red for failure. As well, failures will be
					accompanied by a pop-up window containing details on
					the failure.
				</para>

				<para>
					The Clear Output button clears the contents of the
					output window.
				</para>

			</section>

			<section id="SQLRunner.output_format">

				<title>Output Formats</title>

				<para>
					There are several output modes for the display of
					SQL "select" results: text, SQL, HTML and XML
					(output from the escape commands are always
					displayed as plain text). Text mode is the default,
					and is primarily a raw display format. SQL output is
					most useful with the output of a SELECT statement;
					it will generate SQL that will attempt to re-create
					the data in another database. HTML mode generates an
					HTML table to display the results of a Select. XML
					format is similar but may be used for exporting data
					into other applications.
				</para>

				<para>
					For example, with SQL mode selected, a "select *
					from anecdotes" (a table in a sample bookstore web
					site&apos;s database, used to display a casual
					quotation about books) looked like this:
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/sqlrunner_output.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>
					This could, as you can see, be used to create a SQL
					script to re-create the contents of the database. In
					fact, some developers use SQLRunner primarily for
					this purpose: to create stable test databases from
					"live" data that was created by their application.
				</para>

				<para>
					You can view this same data in HTML just by changing
					the Format selection to HTML and clicking the Run
					button again:
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/sqlrunner_output_2.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>
					When copied and pasted into an HTML file and viewed
					in a browser, the output looked like this:
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/sqlrunner_html_output.png" format="PNG"
							width="4in" />
					</imageobject>
				</mediaobject>
				<para>
					With a bit of formatting, or even a CSS style sheet,
					this HTML page could be made quite usable.
				</para>

				<para>
					SQLRunner is not perfect, but it is adequate for
					many purposes involving direct use of SQL.
				</para>

			</section>

		</section>

		<section id="creating_a_kettle_job">
		
			<title>How to Create a Kettle Job</title>
			
			<section id="creating_a_kettle_job.what">
			
				<title>What it Does</title>
				
				<para>
					This feature allows a user to create a Kettle job
					and multiple transformations based on the information
					in the play pen. The Kettle job is used to take the data
					from the sources of the tables in the play pen and place
					them in the new tables of the target database.
				</para>
			
			</section>
			
			<section id="Setting_up_kettle">
			
				<title>Setup for Kettle</title>
			
				<para>
					Before you start creating jobs, some settings need to be
					configured. Go to the User Preferences and select the JDBC 
					Drivers tab. For each driver that you use in a database 
					connection, set the Kettle Connection Type on the Kettle
					sub-tab.
				</para>
				
			</section>
			
			<section id="creating_a_kettle_job.how">
				
				<title>Creating a Kettle Job</title>
	
				<para>
					Before creating a Kettle job we need to create the new
					database schema in the play pen. This includes creating
					new source connections, dragging tables into the play 
					pen and modifying the play pen to have the desired
					layout. Once the play pen has the correct layout use 
					the forward engineering tool to create the tables and
					relationships in the target database.
				</para>
				
				<para>
					To start creating a Kettle job go to the ETL menu and
					select the "Create Kettle Job" menu item. You should
					see the following window.
				</para>
			
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/create_kettle_job.png" format="PNG" width="4in" />
					</imageobject>
				</mediaobject>
			
				<para>
					Each Kettle job requires a name, a target database
					and either a file path or a repository to save to.
					To set the target database, click the "Properties"
					button. The default join type is used to define what
					join type will be used in all merge-joins.
					Merge-joins are used to create tables with multiple
					sources.
				</para>
				
				<para>
					Note: Merge-joins that are created in
					transformations from Power*Architect will usually
					have to be updated manually. A manual update is
					required as Power*Architect cannot tell which fields
					to compare during the join.
				</para>

				<para>
					When setting the target database, a hostname, port
					number and database name need to be specified. The
					URL template may contain properties for the
					database, host and/or port. If the template contains
					properties for Kettle, the values given in the URL
					will be used for the target connection in Kettle. If
					the template does not contain Kettle properties then
					they can be set on the Kettle tab.
				</para>

				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/create_kettle_db.png" format="PNG" width="4in" />
					</imageobject>
				</mediaobject>
				
				<para>
					To save the Kettle job and transformations to a
					repository you must first choose the repository
					option. Then, any of the source connections can be
					used as a repository provided they have a repository
					set up. If the desired repository is not one of the
					source databases the properties can be set manually.
					When setting up a database connection for use as a
					repository the login name and password can be set on
					the Kettle tab.
				</para>

				<para>
					To start creating the Kettle job and transformation
					files, click the "OK" button. If a repository is
					being used a window will appear to choose the
					directory location in the repository to save to.
				</para>
				
				<mediaobject>
					<imageobject>
						<imagedata
							fileref="doc/images/create_kettle_repository.png" format="PNG" width="4in" />
					</imageobject>
				</mediaobject>

				<para>
					Once the job has been created, a window will display
					additional steps that need to be completed before
					running the job.
				</para>

				<para>
					Note: The transformation files will be stored in the 
					same location as the Kettle job. You must use Kettle 
					to run the job.
				</para>
				
			</section>
		
		</section>

	</chapter>

	<chapter id="db_product_notes">

		<title>Database Product Notes</title>

		<informaltable frame="all" id="db_notes_table">

			<tgroup cols="2">

				<thead>

					<row>
						<entry>
							<para>Database</para>
						</entry>
						<entry>
							<para>Notes</para>
						</entry>
					</row>

				</thead>

				<tbody>

					<row>
						<entry>
							<para>Oracle</para>
						</entry>
						<entry>
							<para>Is fully supported.</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>SQL Server</para>
						</entry>
						<entry>
							<para>Is fully supported.</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>PostgreSQL</para>
						</entry>
						<entry>
							<para>Is fully supported.</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>IBM DB2</para>
						</entry>
						<entry>
							<para>Is fully supported.</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>HSQLDB</para>
						</entry>
						<entry>
							<para>Works; used in samples.</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Derby</para>
						</entry>
						<entry>
							<para>
								Does not work; the current version
								(10.1.2) has what we consider some
								unwarranted chumminess with the JDBC
								Driver Manager that breaks because we
								use our own Java "ClassLoader"
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>MySQL</para>
						</entry>
						<entry>
							<para>Not tested yet.</para>
						</entry>
					</row>

				</tbody>

			</tgroup>

		</informaltable>

	</chapter>

	<chapter id="troubleshooting">

		<title>Troubleshooting</title>

		<para>
			We have worked hard to ensure that Power*Architect works
			correctly. However there are probably always going to be
			some combinations of different database products and
			database configurarations, user actions, computer setups,
			and so on, that just don&apos;t work. We apologize in
			advance for any inconvenience this may cause...
		</para>

		<para>
			If you are having trouble with Power*Architect, we may ask
			that, in order to help us to diagnose the problem, you take
			some or all of the following actions:
		</para>

		<itemizedlist>

			<listitem>

				<para>
					Prepare a description of what you were doing
				</para>

			</listitem>

			<listitem>

				<para>
					Prepare a copy of any errors you encountered
				</para>

			</listitem>

			<listitem>

				<para>
					Post your problem to the
					<ulink
						url="http://www.sqlpower.ca/forum/forums/show/2.page">
						Power*Architect help forum
					</ulink>
				</para>

			</listitem>

		</itemizedlist>

	</chapter>

	<chapter id="glossary">

		<title>Glossary</title>

		<para>
			This section lists some database-related terms and their
			meanings.
		</para>

		<informaltable frame="all" id="glossary_table">

			<tgroup cols="2">

				<tbody>

					<row>
						<entry>
							<para>Column</para>
						</entry>
						<entry>
							<para>
								The set of all instances of a given
								field from all records in a
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?table">
									table
								</ulink>
								.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Database</para>
						</entry>
						<entry>
							<para>
								One or more large structured sets of
								persistent data, usually associated with
								software to update and
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?query">
									query
								</ulink>
								the data. A simple database might be a
								single file containing many
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?records">
									records
								</ulink>
								, each of which contains the same set of
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?fields">
									fields
								</ulink>
								where each field is a certain fixed
								width.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Data Modelling</para>
						</entry>
						<entry>
							<para>
								The product of the database design
								process which aims to identify and
								organize the required data logically and
								physically.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Data Warehousing</para>
						</entry>
						<entry>
							<para>
								A database, often remote, containing
								recent snapshots of corporate data.
								Planners and researchers can use this
								database freely without worrying about
								slowing down day-to-day operations of
								the production database.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>ETL</para>
						</entry>
						<entry>
							<para>
								Extraction, Transforming and Loading -
								the process of maintaining and
								transforming data into and out of a
								relational database.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Foreign key</para>
						</entry>
						<entry>
							<para>
								A
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?column">
									column
								</ulink>
								in a database
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?table">
									table
								</ulink>
								containing values that are also found in
								some
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?primary+key">
									primary key
								</ulink>
								column (of a different table). By
								extension, any reference to entities of
								a different type.
							</para>
							<para>
								Some
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?RDBMSs">
									RDBMSs
								</ulink>
								allow a column to be explicitly labelled
								as a foreign key and only allow values
								to be inserted if they already exist in
								the relevant primary key column.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Identifying Relationship</para>
						</entry>
						<entry>
							<para>
								Where the key of the parent table is a
								subset of the key of the child table.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>JDBC</para>
						</entry>
						<entry>
							<para>
								Java DataBase Connectivity, an
								unofficial acronym for the "java.sql"
								package of functionality used to access
								relational databases from programs
								written in the Java programming
								language.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Key</para>
						</entry>
						<entry>
							<para>
								A value used to identify a
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?record">
									record
								</ulink>
								in a database, derived by applying some
								fixed function to the record. The key is
								often simply one of the
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?fields">
									fields
								</ulink>
								(a
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?column">
									column
								</ulink>
								if the database is considered as a table
								with records being rows, see "
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?key+field">
									key field
								</ulink>
								"). Alternatively the key may be
								obtained by applying some function, e.g.
								a
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?hash+function">
									hash function
								</ulink>
								, to one or more of the fields. The set
								of keys for all records forms an
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?index">
									index
								</ulink>
								. Multiple indexes may be built for one
								database depending on how it is to be
								searched.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Primary key</para>
						</entry>
						<entry>
							<para>
								The
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?candidate+key">
									candidate key
								</ulink>
								selected as being most important for
								identifying a body of information (an
								entity, object or
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?record">
									record
								</ulink>
								).
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Record (row)</para>
						</entry>
						<entry>
							<para>
								One or more structured sets of
								persistent data, usually associated with
								software to update and
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?query">
									query
								</ulink>
								the data. A simple database might be a
								single file containing many
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?records">
									records
								</ulink>
								, each of which contains the same set of
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?fields">
									fields
								</ulink>
								where each field is a certain fixed
								width.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>SQL</para>
						</entry>
						<entry>
							<para>
								<ulink
									url="http://en.wikipedia.org/wiki/SQL#History">
									Originally SEQUEL
								</ulink>
								and still pronounced that way by many
								practitioners, SQL is the Standard Query
								Language; a unified language for
								creating queries that is accepted (with
								some variations) by all modern
								relational databases.
							</para>
						</entry>
					</row>

					<row>
						<entry>
							<para>Table</para>
						</entry>
						<entry>
							<para>
								A collection of
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?records">
									records
								</ulink>
								in a
								<ulink
									url="http://foldoc.org/foldoc/foldoc.cgi?relational+database">
									relational database
								</ulink>
								.
							</para>
						</entry>
					</row>

				</tbody>

			</tgroup>

		</informaltable>

		<para>
			Some of these terms are from FolDoc, "The Free On-line
			Dictionary of Computing", http://www.foldoc.org/, Editor
			Denis Howe.
		</para>

	</chapter>

	<chapter id="acknowledgements">
		<title>Acknowledgements</title>

		<section id="ASF">
			<title>The Apache Software Foundation</title>
			<para>
				The Power*Architect development team is grateful to the
				Apache Software Foundation and their contributors; their
				high-quality reusable Java libraries have been
				invaluable in the development of the Architect. The text
				of the Apache License follows, because we are
				redistributing several Apache libraries upon which the
				Architect depends.
			</para>

			<para>
				The following license applies to these library jar
				files, which are distributed as part of the Architect
				download:
			</para>

			<itemizedlist>
				<listitem>
					<para>commons-beanutils.jar</para>
				</listitem>
				<listitem>
					<para>commons-digester.jar</para>
				</listitem>
				<listitem>
					<para>commons-logging.jar</para>
				</listitem>
				<listitem>
					<para>commons-beanutils-bean-collections.jar</para>
				</listitem>
				<listitem>
					<para>commons-beanutils-core.jar</para>
				</listitem>
				<listitem>
					<para>jakarta-regexp-1.2.jar</para>
				</listitem>
				<listitem>
					<para>commons-collections-3.1.jar</para>
				</listitem>
				<listitem>
					<para>commons-dbcp-1.2.1.jar</para>
				</listitem>
				<listitem>
					<para>commons-pool-1.3.jar</para>
				</listitem>
			</itemizedlist>

			<literallayout>
				Apache License Version 2.0, January 2004
				http://www.apache.org/licenses/

				TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND
				DISTRIBUTION

				1. Definitions.

				"License" shall mean the terms and conditions for use,
				reproduction, and distribution as defined by Sections 1
				through 9 of this document.

				"Licensor" shall mean the copyright owner or entity
				authorized by the copyright owner that is granting the
				License.

				"Legal Entity" shall mean the union of the acting entity
				and all other entities that control, are controlled by,
				or are under common control with that entity. For the
				purposes of this definition, "control" means (i) the
				power, direct or indirect, to cause the direction or
				management of such entity, whether by contract or
				otherwise, or (ii) ownership of fifty percent (50%) or
				more of the outstanding shares, or (iii) beneficial
				ownership of such entity.

				"You" (or "Your") shall mean an individual or Legal
				Entity exercising permissions granted by this License.

				"Source" form shall mean the preferred form for making
				modifications, including but not limited to software
				source code, documentation source, and configuration
				files.

				"Object" form shall mean any form resulting from
				mechanical transformation or translation of a Source
				form, including but not limited to compiled object code,
				generated documentation, and conversions to other media
				types.

				"Work" shall mean the work of authorship, whether in
				Source or Object form, made available under the License,
				as indicated by a copyright notice that is included in
				or attached to the work (an example is provided in the
				Appendix below).

				"Derivative Works" shall mean any work, whether in
				Source or Object form, that is based on (or derived
				from) the Work and for which the editorial revisions,
				annotations, elaborations, or other modifications
				represent, as a whole, an original work of authorship.
				For the purposes of this License, Derivative Works shall
				not include works that remain separable from, or merely
				link (or bind by name) to the interfaces of, the Work
				and Derivative Works thereof.

				"Contribution" shall mean any work of authorship,
				including the original version of the Work and any
				modifications or additions to that Work or Derivative
				Works thereof, that is intentionally submitted to
				Licensor for inclusion in the Work by the copyright
				owner or by an individual or Legal Entity authorized to
				submit on behalf of the copyright owner. For the
				purposes of this definition, "submitted" means any form
				of electronic, verbal, or written communication sent to
				the Licensor or its representatives, including but not
				limited to communication on electronic mailing lists,
				source code control systems, and issue tracking systems
				that are managed by, or on behalf of, the Licensor for
				the purpose of discussing and improving the Work, but
				excluding communication that is conspicuously marked or
				otherwise designated in writing by the copyright owner
				as "Not a Contribution."

				"Contributor" shall mean Licensor and any individual or
				Legal Entity on behalf of whom a Contribution has been
				received by Licensor and subsequently incorporated
				within the Work.

				2. Grant of Copyright License. Subject to the terms and
				conditions of this License, each Contributor hereby
				grants to You a perpetual, worldwide, non-exclusive,
				no-charge, royalty-free, irrevocable copyright license
				to reproduce, prepare Derivative Works of, publicly
				display, publicly perform, sublicense, and distribute
				the Work and such Derivative Works in Source or Object
				form.

				3. Grant of Patent License. Subject to the terms and
				conditions of this License, each Contributor hereby
				grants to You a perpetual, worldwide, non-exclusive,
				no-charge, royalty-free, irrevocable (except as stated
				in this section) patent license to make, have made, use,
				offer to sell, sell, import, and otherwise transfer the
				Work, where such license applies only to those patent
				claims licensable by such Contributor that are
				necessarily infringed by their Contribution(s) alone or
				by combination of their Contribution(s) with the Work to
				which such Contribution(s) was submitted. If You
				institute patent litigation against any entity
				(including a cross-claim or counterclaim in a lawsuit)
				alleging that the Work or a Contribution incorporated
				within the Work constitutes direct or contributory
				patent infringement, then any patent licenses granted to
				You under this License for that Work shall terminate as
				of the date such litigation is filed.

				4. Redistribution. You may reproduce and distribute
				copies of the Work or Derivative Works thereof in any
				medium, with or without modifications, and in Source or
				Object form, provided that You meet the following
				conditions:

				(a) You must give any other recipients of the Work or
				Derivative Works a copy of this License; and

				(b) You must cause any modified files to carry prominent
				notices stating that You changed the files; and

				(c) You must retain, in the Source form of any
				Derivative Works that You distribute, all copyright,
				patent, trademark, and attribution notices from the
				Source form of the Work, excluding those notices that do
				not pertain to any part of the Derivative Works; and

				(d) If the Work includes a "NOTICE" text file as part of
				its distribution, then any Derivative Works that You
				distribute must include a readable copy of the
				attribution notices contained within such NOTICE file,
				excluding those notices that do not pertain to any part
				of the Derivative Works, in at least one of the
				following places: within a NOTICE text file distributed
				as part of the Derivative Works; within the Source form
				or documentation, if provided along with the Derivative
				Works; or, within a display generated by the Derivative
				Works, if and wherever such third-party notices normally
				appear. The contents of the NOTICE file are for
				informational purposes only and do not modify the
				License. You may add Your own attribution notices within
				Derivative Works that You distribute, alongside or as an
				addendum to the NOTICE text from the Work, provided that
				such additional attribution notices cannot be construed
				as modifying the License.

				You may add Your own copyright statement to Your
				modifications and may provide additional or different
				license terms and conditions for use, reproduction, or
				distribution of Your modifications, or for any such
				Derivative Works as a whole, provided Your use,
				reproduction, and distribution of the Work otherwise
				complies with the conditions stated in this License.

				5. Submission of Contributions. Unless You explicitly
				state otherwise, any Contribution intentionally
				submitted for inclusion in the Work by You to the
				Licensor shall be under the terms and conditions of this
				License, without any additional terms or conditions.
				Notwithstanding the above, nothing herein shall
				supersede or modify the terms of any separate license
				agreement you may have executed with Licensor regarding
				such Contributions.

				6. Trademarks. This License does not grant permission to
				use the trade names, trademarks, service marks, or
				product names of the Licensor, except as required for
				reasonable and customary use in describing the origin of
				the Work and reproducing the content of the NOTICE file.

				7. Disclaimer of Warranty. Unless required by applicable
				law or agreed to in writing, Licensor provides the Work
				(and each Contributor provides its Contributions) on an
				"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
				KIND, either express or implied, including, without
				limitation, any warranties or conditions of TITLE,
				NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
				PARTICULAR PURPOSE. You are solely responsible for
				determining the appropriateness of using or
				redistributing the Work and assume any risks associated
				with Your exercise of permissions under this License.

				8. Limitation of Liability. In no event and under no
				legal theory, whether in tort (including negligence),
				contract, or otherwise, unless required by applicable
				law (such as deliberate and grossly negligent acts) or
				agreed to in writing, shall any Contributor be liable to
				You for damages, including any direct, indirect,
				special, incidental, or consequential damages of any
				character arising as a result of this License or out of
				the use or inability to use the Work (including but not
				limited to damages for loss of goodwill, work stoppage,
				computer failure or malfunction, or any and all other
				commercial damages or losses), even if such Contributor
				has been advised of the possibility of such damages.

				9. Accepting Warranty or Additional Liability. While
				redistributing the Work or Derivative Works thereof, You
				may choose to offer, and charge a fee for, acceptance of
				support, warranty, indemnity, or other liability
				obligations and/or rights consistent with this License.
				However, in accepting such obligations, You may act only
				on Your own behalf and on Your sole responsibility, not
				on behalf of any other Contributor, and only if You
				agree to indemnify, defend, and hold each Contributor
				harmless for any liability incurred by, or claims
				asserted against, such Contributor by reason of your
				accepting any such warranty or additional liability.

				END OF TERMS AND CONDITIONS

				APPENDIX: How to apply the Apache License to your work.

				To apply the Apache License to your work, attach the
				following boilerplate notice, with the fields enclosed
				by brackets "[]" replaced with your own identifying
				information. (Don't include the brackets!) The text
				should be enclosed in the appropriate comment syntax for
				the file format. We also recommend that a file or class
				name and description of purpose be included on the same
				"printed page" as the copyright notice for easier
				identification within third-party archives.

				Copyright [yyyy] [name of copyright owner]

				Licensed under the Apache License, Version 2.0 (the
				"License"); you may not use this file except in
				compliance with the License. You may obtain a copy of
				the License at

				http://www.apache.org/licenses/LICENSE-2.0

				Unless required by applicable law or agreed to in
				writing, software distributed under the License is
				distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
				CONDITIONS OF ANY KIND, either express or implied. See
				the License for the specific language governing
				permissions and limitations under the License.
			</literallayout>
		</section>

		<section id="JGoodies">
			<title>JGoodies Karsten Lentzsch</title>

			<para>
				The Power*Architect team is also grateful to JGoodies
				for their excellent forms layout manager for Swing.
				JGoodies forms is released under the BSD license,
				reproduced below.
			</para>

			<para>
				The following license applies to these library jar
				files, which are distributed as part of the Architect
				download:
			</para>

			<itemizedlist>
				<listitem>
					<para>forms-1.0.6.jar</para>
				</listitem>
			</itemizedlist>

			<literallayout>
				The BSD License for the JGoodies Forms
				======================================

				Copyright (c) 2002-2006 JGoodies Karsten Lentzsch. All
				rights reserved.

				Redistribution and use in source and binary forms, with
				or without modification, are permitted provided that the
				following conditions are met:

				o Redistributions of source code must retain the above
				copyright notice, this list of conditions and the
				following disclaimer.

				o Redistributions in binary form must reproduce the
				above copyright notice, this list of conditions and the
				following disclaimer in the documentation and/or other
				materials provided with the distribution.


				o Neither the name of JGoodies Karsten Lentzsch nor the
				names of its contributors may be used to endorse or
				promote products derived from this software without
				specific prior written permission.

				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
				CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
				WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
				PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
				COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
				DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
				CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
				PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
				USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
				CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
				CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
				USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
				OF SUCH DAMAGE.
			</literallayout>
		</section>

		<section id="PostgreSqlJdbcDriver">
			<title>PostgreSQL JDBC Driver</title>

			<para>
				The Power*Architect team would like to thank the PostgreSQL JDBC Driver
				team for their JDBC driver.
			</para>

			<para>
				The following license applies to these library jar
				files, which are distributed as part of the Architect
				download:
			</para>

			<itemizedlist>
				<listitem>
					<para>postgresql-8.2-504.jdbc.jar</para>
				</listitem>
			</itemizedlist>

			<literallayout>
				Copyright (c) 1997-2005, PostgreSQL Global Development
				Group All rights reserved.

				Redistribution and use in source and binary forms, with
				or without modification, are permitted provided that the
				following conditions are met:

				1. Redistributions of source code must retain the above
				copyright notice, this list of conditions and the
				following disclaimer. 2. Redistributions in binary form
				must reproduce the above copyright notice, this list of
				conditions and the following disclaimer in the
				documentation and/or other materials provided with the
				distribution. 3. Neither the name of the PostgreSQL
				Global Development Group nor the names of its
				contributors may be used to endorse or promote products
				derived from this software without specific prior
				written permission.

				THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
				CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
				WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
				PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
				COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
				DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
				CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
				PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
				USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
				CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
				CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
				USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
				OF SUCH DAMAGE.
			</literallayout>
		</section>

		<section id="iText">
			<title>iText</title>
			<para>
				The Power*Architect team is also grateful to Bruno
				Lowagie and Paulo Soares for their excellent Java PDF
				library. iText is released under the LGPL license,
				reproduced below.
			</para>

			<para>
				The following license applies to these library jar
				files, which are distributed as part of the Architect
				download:
			</para>

			<itemizedlist>
				<listitem>
					<para>itext-1.4.2.jar</para>
				</listitem>
			</itemizedlist>
			<literallayout>
				GNU LESSER GENERAL PUBLIC LICENSE Version 2.1, February
				1999

				Copyright (C) 1991, 1999 Free Software Foundation, Inc.
				51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
				USA Everyone is permitted to copy and distribute
				verbatim copies of this license document, but changing
				it is not allowed.

				[This is the first released version of the Lesser GPL.
				It also counts as the successor of the GNU Library
				Public License, version 2, hence the version number
				2.1.]

				Preamble

				The licenses for most software are designed to take away
				your freedom to share and change it. By contrast, the
				GNU General Public Licenses are intended to guarantee
				your freedom to share and change free software--to make
				sure the software is free for all its users.

				This license, the Lesser General Public License, applies
				to some specially designated software
				packages--typically libraries--of the Free Software
				Foundation and other authors who decide to use it. You
				can use it too, but we suggest you first think carefully
				about whether this license or the ordinary General
				Public License is the better strategy to use in any
				particular case, based on the explanations below.

				When we speak of free software, we are referring to
				freedom of use, not price. Our General Public Licenses
				are designed to make sure that you have the freedom to
				distribute copies of free software (and charge for this
				service if you wish); that you receive source code or
				can get it if you want it; that you can change the
				software and use pieces of it in new free programs; and
				that you are informed that you can do these things.

				To protect your rights, we need to make restrictions
				that forbid distributors to deny you these rights or to
				ask you to surrender these rights. These restrictions
				translate to certain responsibilities for you if you
				distribute copies of the library or if you modify it.

				For example, if you distribute copies of the library,
				whether gratis or for a fee, you must give the
				recipients all the rights that we gave you. You must
				make sure that they, too, receive or can get the source
				code. If you link other code with the library, you must
				provide complete object files to the recipients, so that
				they can relink them with the library after making
				changes to the library and recompiling it. And you must
				show them these terms so they know their rights.

				We protect your rights with a two-step method: (1) we
				copyright the library, and (2) we offer you this
				license, which gives you legal permission to copy,
				distribute and/or modify the library.

				To protect each distributor, we want to make it very
				clear that there is no warranty for the free library.
				Also, if the library is modified by someone else and
				passed on, the recipients should know that what they
				have is not the original version, so that the original
				author's reputation will not be affected by problems
				that might be introduced by others.

				Finally, software patents pose a constant threat to the
				existence of any free program. We wish to make sure that
				a company cannot effectively restrict the users of a
				free program by obtaining a restrictive license from a
				patent holder. Therefore, we insist that any patent
				license obtained for a version of the library must be
				consistent with the full freedom of use specified in
				this license.

				Most GNU software, including some libraries, is covered
				by the ordinary GNU General Public License. This
				license, the GNU Lesser General Public License, applies
				to certain designated libraries, and is quite different
				from the ordinary General Public License. We use this
				license for certain libraries in order to permit linking
				those libraries into non-free programs.

				When a program is linked with a library, whether
				statically or using a shared library, the combination of
				the two is legally speaking a combined work, a
				derivative of the original library. The ordinary General
				Public License therefore permits such linking only if
				the entire combination fits its criteria of freedom. The
				Lesser General Public License permits more lax criteria
				for linking other code with the library.

				We call this license the "Lesser" General Public License
				because it does Less to protect the user's freedom than
				the ordinary General Public License. It also provides
				other free software developers Less of an advantage over
				competing non-free programs. These disadvantages are the
				reason we use the ordinary General Public License for
				many libraries. However, the Lesser license provides
				advantages in certain special circumstances.

				For example, on rare occasions, there may be a special
				need to encourage the widest possible use of a certain
				library, so that it becomes a de-facto standard. To
				achieve this, non-free programs must be allowed to use
				the library. A more frequent case is that a free library
				does the same job as widely used non-free libraries. In
				this case, there is little to gain by limiting the free
				library to free software only, so we use the Lesser
				General Public License.

				In other cases, permission to use a particular library
				in non-free programs enables a greater number of people
				to use a large body of free software. For example,
				permission to use the GNU C Library in non-free programs
				enables many more people to use the whole GNU operating
				system, as well as its variant, the GNU/Linux operating
				system.

				Although the Lesser General Public License is Less
				protective of the users' freedom, it does ensure that
				the user of a program that is linked with the Library
				has the freedom and the wherewithal to run that program
				using a modified version of the Library.

				The precise terms and conditions for copying,
				distribution and modification follow. Pay close
				attention to the difference between a "work based on the
				library" and a "work that uses the library". The former
				contains code derived from the library, whereas the
				latter must be combined with the library in order to
				run.

				GNU LESSER GENERAL PUBLIC LICENSE TERMS AND CONDITIONS
				FOR COPYING, DISTRIBUTION AND MODIFICATION

				0. This License Agreement applies to any software
				library or other program which contains a notice placed
				by the copyright holder or other authorized party saying
				it may be distributed under the terms of this Lesser
				General Public License (also called "this License").
				Each licensee is addressed as "you".

				A "library" means a collection of software functions
				and/or data prepared so as to be conveniently linked
				with application programs (which use some of those
				functions and data) to form executables.

				The "Library", below, refers to any such software
				library or work which has been distributed under these
				terms. A "work based on the Library" means either the
				Library or any derivative work under copyright law: that
				is to say, a work containing the Library or a portion of
				it, either verbatim or with modifications and/or
				translated straightforwardly into another language.
				(Hereinafter, translation is included without limitation
				in the term "modification".)

				"Source code" for a work means the preferred form of the
				work for making modifications to it. For a library,
				complete source code means all the source code for all
				modules it contains, plus any associated interface
				definition files, plus the scripts used to control
				compilation and installation of the library.

				Activities other than copying, distribution and
				modification are not covered by this License; they are
				outside its scope. The act of running a program using
				the Library is not restricted, and output from such a
				program is covered only if its contents constitute a
				work based on the Library (independent of the use of the
				Library in a tool for writing it). Whether that is true
				depends on what the Library does and what the program
				that uses the Library does.

				1. You may copy and distribute verbatim copies of the
				Library's complete source code as you receive it, in any
				medium, provided that you conspicuously and
				appropriately publish on each copy an appropriate
				copyright notice and disclaimer of warranty; keep intact
				all the notices that refer to this License and to the
				absence of any warranty; and distribute a copy of this
				License along with the Library.

				You may charge a fee for the physical act of
				transferring a copy, and you may at your option offer
				warranty protection in exchange for a fee.

				2. You may modify your copy or copies of the Library or
				any portion of it, thus forming a work based on the
				Library, and copy and distribute such modifications or
				work under the terms of Section 1 above, provided that
				you also meet all of these conditions:

				a) The modified work must itself be a software library.

				b) You must cause the files modified to carry prominent
				notices stating that you changed the files and the date
				of any change.

				c) You must cause the whole of the work to be licensed
				at no charge to all third parties under the terms of
				this License.

				d) If a facility in the modified Library refers to a
				function or a table of data to be supplied by an
				application program that uses the facility, other than
				as an argument passed when the facility is invoked, then
				you must make a good faith effort to ensure that, in the
				event an application does not supply such function or
				table, the facility still operates, and performs
				whatever part of its purpose remains meaningful.

				(For example, a function in a library to compute square
				roots has a purpose that is entirely well-defined
				independent of the application. Therefore, Subsection 2d
				requires that any application-supplied function or table
				used by this function must be optional: if the
				application does not supply it, the square root function
				must still compute square roots.)

				These requirements apply to the modified work as a
				whole. If identifiable sections of that work are not
				derived from the Library, and can be reasonably
				considered independent and separate works in themselves,
				then this License, and its terms, do not apply to those
				sections when you distribute them as separate works. But
				when you distribute the same sections as part of a whole
				which is a work based on the Library, the distribution
				of the whole must be on the terms of this License, whose
				permissions for other licensees extend to the entire
				whole, and thus to each and every part regardless of who
				wrote it.

				Thus, it is not the intent of this section to claim
				rights or contest your rights to work written entirely
				by you; rather, the intent is to exercise the right to
				control the distribution of derivative or collective
				works based on the Library.

				In addition, mere aggregation of another work not based
				on the Library with the Library (or with a work based on
				the Library) on a volume of a storage or distribution
				medium does not bring the other work under the scope of
				this License.

				3. You may opt to apply the terms of the ordinary GNU
				General Public License instead of this License to a
				given copy of the Library. To do this, you must alter
				all the notices that refer to this License, so that they
				refer to the ordinary GNU General Public License,
				version 2, instead of to this License. (If a newer
				version than version 2 of the ordinary GNU General
				Public License has appeared, then you can specify that
				version instead if you wish.) Do not make any other
				change in these notices.

				Once this change is made in a given copy, it is
				irreversible for that copy, so the ordinary GNU General
				Public License applies to all subsequent copies and
				derivative works made from that copy.

				This option is useful when you wish to copy part of the
				code of the Library into a program that is not a
				library.

				4. You may copy and distribute the Library (or a portion
				or derivative of it, under Section 2) in object code or
				executable form under the terms of Sections 1 and 2
				above provided that you accompany it with the complete
				corresponding machine-readable source code, which must
				be distributed under the terms of Sections 1 and 2 above
				on a medium customarily used for software interchange.

				If distribution of object code is made by offering
				access to copy from a designated place, then offering
				equivalent access to copy the source code from the same
				place satisfies the requirement to distribute the source
				code, even though third parties are not compelled to
				copy the source along with the object code.

				5. A program that contains no derivative of any portion
				of the Library, but is designed to work with the Library
				by being compiled or linked with it, is called a "work
				that uses the Library". Such a work, in isolation, is
				not a derivative work of the Library, and therefore
				falls outside the scope of this License.

				However, linking a "work that uses the Library" with the
				Library creates an executable that is a derivative of
				the Library (because it contains portions of the
				Library), rather than a "work that uses the library".
				The executable is therefore covered by this License.
				Section 6 states terms for distribution of such
				executables.

				When a "work that uses the Library" uses material from a
				header file that is part of the Library, the object code
				for the work may be a derivative work of the Library
				even though the source code is not. Whether this is true
				is especially significant if the work can be linked
				without the Library, or if the work is itself a library.
				The threshold for this to be true is not precisely
				defined by law.

				If such an object file uses only numerical parameters,
				data structure layouts and accessors, and small macros
				and small inline functions (ten lines or less in
				length), then the use of the object file is
				unrestricted, regardless of whether it is legally a
				derivative work. (Executables containing this object
				code plus portions of the Library will still fall under
				Section 6.)

				Otherwise, if the work is a derivative of the Library,
				you may distribute the object code for the work under
				the terms of Section 6. Any executables containing that
				work also fall under Section 6, whether or not they are
				linked directly with the Library itself.

				6. As an exception to the Sections above, you may also
				combine or link a "work that uses the Library" with the
				Library to produce a work containing portions of the
				Library, and distribute that work under terms of your
				choice, provided that the terms permit modification of
				the work for the customer's own use and reverse
				engineering for debugging such modifications.

				You must give prominent notice with each copy of the
				work that the Library is used in it and that the Library
				and its use are covered by this License. You must supply
				a copy of this License. If the work during execution
				displays copyright notices, you must include the
				copyright notice for the Library among them, as well as
				a reference directing the user to the copy of this
				License. Also, you must do one of these things:

				a) Accompany the work with the complete corresponding
				machine-readable source code for the Library including
				whatever changes were used in the work (which must be
				distributed under Sections 1 and 2 above); and, if the
				work is an executable linked with the Library, with the
				complete machine-readable "work that uses the Library",
				as object code and/or source code, so that the user can
				modify the Library and then relink to produce a modified
				executable containing the modified Library. (It is
				understood that the user who changes the contents of
				definitions files in the Library will not necessarily be
				able to recompile the application to use the modified
				definitions.)

				b) Use a suitable shared library mechanism for linking
				with the Library. A suitable mechanism is one that (1)
				uses at run time a copy of the library already present
				on the user's computer system, rather than copying
				library functions into the executable, and (2) will
				operate properly with a modified version of the library,
				if the user installs one, as long as the modified
				version is interface-compatible with the version that
				the work was made with.

				c) Accompany the work with a written offer, valid for at
				least three years, to give the same user the materials
				specified in Subsection 6a, above, for a charge no more
				than the cost of performing this distribution.

				d) If distribution of the work is made by offering
				access to copy from a designated place, offer equivalent
				access to copy the above specified materials from the
				same place.

				e) Verify that the user has already received a copy of
				these materials or that you have already sent this user
				a copy.

				For an executable, the required form of the "work that
				uses the Library" must include any data and utility
				programs needed for reproducing the executable from it.
				However, as a special exception, the materials to be
				distributed need not include anything that is normally
				distributed (in either source or binary form) with the
				major components (compiler, kernel, and so on) of the
				operating system on which the executable runs, unless
				that component itself accompanies the executable.

				It may happen that this requirement contradicts the
				license restrictions of other proprietary libraries that
				do not normally accompany the operating system. Such a
				contradiction means you cannot use both them and the
				Library together in an executable that you distribute.

				7. You may place library facilities that are a work
				based on the Library side-by-side in a single library
				together with other library facilities not covered by
				this License, and distribute such a combined library,
				provided that the separate distribution of the work
				based on the Library and of the other library facilities
				is otherwise permitted, and provided that you do these
				two things:

				a) Accompany the combined library with a copy of the
				same work based on the Library, uncombined with any
				other library facilities. This must be distributed under
				the terms of the Sections above.

				b) Give prominent notice with the combined library of
				the fact that part of it is a work based on the Library,
				and explaining where to find the accompanying uncombined
				form of the same work.

				8. You may not copy, modify, sublicense, link with, or
				distribute the Library except as expressly provided
				under this License. Any attempt otherwise to copy,
				modify, sublicense, link with, or distribute the Library
				is void, and will automatically terminate your rights
				under this License. However, parties who have received
				copies, or rights, from you under this License will not
				have their licenses terminated so long as such parties
				remain in full compliance.

				9. You are not required to accept this License, since
				you have not signed it. However, nothing else grants you
				permission to modify or distribute the Library or its
				derivative works. These actions are prohibited by law if
				you do not accept this License. Therefore, by modifying
				or distributing the Library (or any work based on the
				Library), you indicate your acceptance of this License
				to do so, and all its terms and conditions for copying,
				distributing or modifying the Library or works based on
				it.

				10. Each time you redistribute the Library (or any work
				based on the Library), the recipient automatically
				receives a license from the original licensor to copy,
				distribute, link with or modify the Library subject to
				these terms and conditions. You may not impose any
				further restrictions on the recipients' exercise of the
				rights granted herein. You are not responsible for
				enforcing compliance by third parties with this License.

				11. If, as a consequence of a court judgment or
				allegation of patent infringement or for any other
				reason (not limited to patent issues), conditions are
				imposed on you (whether by court order, agreement or
				otherwise) that contradict the conditions of this
				License, they do not excuse you from the conditions of
				this License. If you cannot distribute so as to satisfy
				simultaneously your obligations under this License and
				any other pertinent obligations, then as a consequence
				you may not distribute the Library at all. For example,
				if a patent license would not permit royalty-free
				redistribution of the Library by all those who receive
				copies directly or indirectly through you, then the only
				way you could satisfy both it and this License would be
				to refrain entirely from distribution of the Library.

				If any portion of this section is held invalid or
				unenforceable under any particular circumstance, the
				balance of the section is intended to apply, and the
				section as a whole is intended to apply in other
				circumstances.

				It is not the purpose of this section to induce you to
				infringe any patents or other property right claims or
				to contest validity of any such claims; this section has
				the sole purpose of protecting the integrity of the free
				software distribution system which is implemented by
				public license practices. Many people have made generous
				contributions to the wide range of software distributed
				through that system in reliance on consistent
				application of that system; it is up to the author/donor
				to decide if he or she is willing to distribute software
				through any other system and a licensee cannot impose
				that choice.

				This section is intended to make thoroughly clear what
				is believed to be a consequence of the rest of this
				License.

				12. If the distribution and/or use of the Library is
				restricted in certain countries either by patents or by
				copyrighted interfaces, the original copyright holder
				who places the Library under this License may add an
				explicit geographical distribution limitation excluding
				those countries, so that distribution is permitted only
				in or among countries not thus excluded. In such case,
				this License incorporates the limitation as if written
				in the body of this License.

				13. The Free Software Foundation may publish revised
				and/or new versions of the Lesser General Public License
				from time to time. Such new versions will be similar in
				spirit to the present version, but may differ in detail
				to address new problems or concerns.

				Each version is given a distinguishing version number.
				If the Library specifies a version number of this
				License which applies to it and "any later version", you
				have the option of following the terms and conditions
				either of that version or of any later version published
				by the Free Software Foundation. If the Library does not
				specify a license version number, you may choose any
				version ever published by the Free Software Foundation.

				14. If you wish to incorporate parts of the Library into
				other free programs whose distribution conditions are
				incompatible with these, write to the author to ask for
				permission. For software which is copyrighted by the
				Free Software Foundation, write to the Free Software
				Foundation; we sometimes make exceptions for this. Our
				decision will be guided by the two goals of preserving
				the free status of all derivatives of our free software
				and of promoting the sharing and reuse of software
				generally.

				NO WARRANTY

				15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE,
				THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT
				PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE
				STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
				PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF
				ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
				NOT LIMITED TO, THE IMPLIED WARRANTIES OF
				MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
				THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
				LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE,
				YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
				OR CORRECTION.

				16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR
				AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY
				OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE
				LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
				DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
				CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
				INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED
				TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
				LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF
				THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
				SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
				POSSIBILITY OF SUCH DAMAGES.

				END OF TERMS AND CONDITIONS

				How to Apply These Terms to Your New Libraries

				If you develop a new library, and you want it to be of
				the greatest possible use to the public, we recommend
				making it free software that everyone can redistribute
				and change. You can do so by permitting redistribution
				under these terms (or, alternatively, under the terms of
				the ordinary General Public License).

				To apply these terms, attach the following notices to
				the library. It is safest to attach them to the start of
				each source file to most effectively convey the
				exclusion of warranty; and each file should have at
				least the "copyright" line and a pointer to where the
				full notice is found.

				&lt;one line to give the library's name and a brief idea
				of what it does.&gt; Copyright (C) &lt;year&gt; &lt;name
				of author&gt;

				This library is free software; you can redistribute it
				and/or modify it under the terms of the GNU Lesser
				General Public License as published by the Free Software
				Foundation; either version 2.1 of the License, or (at
				your option) any later version.

				This library is distributed in the hope that it will be
				useful, but WITHOUT ANY WARRANTY; without even the
				implied warranty of MERCHANTABILITY or FITNESS FOR A
				PARTICULAR PURPOSE. See the GNU Lesser General Public
				License for more details.

				You should have received a copy of the GNU Lesser
				General Public License along with this library; if not,
				write to the Free Software Foundation, Inc., 51 Franklin
				Street, Fifth Floor, Boston, MA 02110-1301, USA

				Also add information on how to contact you by electronic
				and paper mail.

				You should also get your employer (if you work as a
				programmer) or your school, if any, to sign a "copyright
				disclaimer" for the library, if necessary. Here is a
				sample; alter the names:

				Yoyodyne, Inc., hereby disclaims all copyright interest
				in the library `Frob' (a library for tweaking knobs)
				written by James Random Hacker.

				&lt;signature of Ty Coon&gt;, 1 April 1990 Ty Coon,
				President of Vice

				That's all there is to it!



			</literallayout>
		</section>

		<section id="JUnit">
			<title>JUnit</title>
			<para>
				The Power*Architect team would also like to extend our
				sincere thanks to the JUnit.org team. JUnit forms an
				invaluable part of our development process, but it is
				not redistributed as part of the Architect download so
				its license is not reproduced here.
			</para>

			<para>
				If you develop software, you should become test infected
				too! Learn about JUnit at
				<ulink url="http://www.junit.org/">
					http://www.junit.org/
				</ulink>
				.
			</para>

		</section>

		<section id="eclipse">
			<title>The Eclipse Foundation</title>
			<para>
				The Power*Archited was primarily developed and tested
				using the
				<ulink url="http://www.sqlpower.ca/">Eclipse</ulink>
				Java Development Tools, one of the more productive Java
				environments around.
			</para>
		</section>

		<section id="SUNW">
			<title>Sun Microsystems</title>

			<para>
				Last but not least, many thanks to
				<ulink url="http://java.sun.com/">
					Sun Microsystems
				</ulink>
				and their various Java development teams for creating,
				extending, bugfixing, documenting, and supporting the
				Java platform over the past
				<emphasis>N</emphasis>
				years!
			</para>

		</section>

	</chapter>

</book>




