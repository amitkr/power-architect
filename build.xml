<project name="architect" default="dist" basedir=".">

	<!-- $Id$ -->
	<!-- get the version number from source code ArchitectUtils -->

	<property file="user.properties" />

	<property name="src" value="src"/>
	<property name="build" value="build"/>
	<property name="build.compiler" value="modern"/>
	<property name="installer.dir" value="installer"/>
	<!-- The staging directory is a temp dir that is used as a base for all the distributions -->
	<property name="staging.dir" value="staging" />
	<property name="izpack.dir" value="IzPack"/>
		
	<taskdef name="izpack" classpath="${izpack.dir}/lib/compiler.jar" classname="com.izforge.izpack.ant.IzPackTask"/>
	<taskdef name="jarbundler" classpath="osx_packaging_utils/jarbundler.jar:osx_packaging_utils/xercesImpl.jar:osx_packaging_utils/xml-apis.jar" classname="net.sourceforge.jarbundler.JarBundler"/>
	
	<condition property="isMac">
		<os family="mac"/>
	</condition>

	<condition property="isNotMac">
		<not>
			<os family="mac"/>
		</not>
	</condition>
	
	<target name="init">
		<tstamp/>
		<mkdir dir="${build}"/>
		<javac srcdir="${src}" destdir="${build}" classpathref="compile.classpath" includes="ca/sqlpower/architect/ArchitectVersion.java" debug="true" deprecation="true">
			
		</javac>
		<taskdef name="genVersion"
					classname="ca.sqlpower.architect.ArchitectVersion"
			        classpath="build"/>
		<genVersion message="Architect!"/>
		<echo message="Building Architect version: ${app_ver_major}.${app_ver_minor}.${app_ver_tiny}"> </echo>
		<property name="deploy.dir" value="deploy/architect-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}"/>
		<mkdir dir="${deploy.dir}"/>
		
	</target>

	<target name="compile" depends="init,copyicons,copylog4jprops">
		<javac srcdir="${src}" destdir="${build}" classpathref="compile.classpath" debug="true" deprecation="true">
          <!-- <compilerarg compiler="jikes" value="+Pno-naming-convention"/> -->
        </javac>
	</target>

    <!-- copies our custom icon files to the build dir so
         they will be in the classpath at runtime. -->
	<target name="copyicons" depends="init">
		<mkdir dir="${build}/icons"/>
        <copy todir="${build}/icons">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>				
			</fileset>
		</copy>
    </target>

    <!-- Deploy the log4j.properties.example file to log4j.properties -->

	<target name="copylog4jprops" depends="init">
	    <!-- copies the template log4j config file into the build dir -->
	    <copy tofile="${build}/log4j.properties"
    	        file="src/log4j.properties.example"/>
    </target>

	<!-- DOCUMENTATION 
		There are THREE main documentation targets, all built from the
		docbook XML file docs/PowerArchitectUsersGuide:
			help - JavaHelp (jarred and shipped)
			html - for quick viewing on our web site
			PDF - because we can :-)
	-->

	<!-- NOTE: All XSLT steps currently require xalan on classpath since JDK1.5 is behind -->
	<path id="docbookclasspath">
		<fileset dir="doc/tools/xalan">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<target name="userguide" depends="help,html,pdf" description="Create user guide in HTML and PDF">
	</target>
	
	<!-- Create an intermediate docbook document - for use both by help and html -
	with no width attributes on the images (the Swing HTML browser chokes 
	when there is width but no height in an image tag) 
	-->	
	<target name="xslt-stripwidths">
		<xslt
			style="doc/tools/strip-width.xsl"
			in="doc/PowerArchitectUserGuide.xml"
			out="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			classpathref="docbookclasspath">
		</xslt>
	</target>
	
	<!-- Build the Help (JavaHelp, HTML-based format) -->
	<target name="help" depends="xslt-stripwidths" description="Create JavaHelp">
		<delete dir="${build}/help"/>
		<mkdir dir="${build}/help"/>
		<xslt
			style="doc/tools/xslt/javahelp/javahelp.xsl"
			in="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			out="${build}/help/zzz"
			classpathref="docbookclasspath">
		</xslt>
		<!-- Seemed to need to give dest/file (help/zzz) in above, clean up -->
		<delete file="${build}/help/zzz"/>
		
		<!-- Index it I: limited-terms index: created manually, just copy it,
		 *** overwriting empty one that DocBook Javahelp made.
		 -->
		<copy file="doc/jhelpidx.xml" todir="${build}/help" overwrite="true"/>
		
		<!-- Index it II: full text search -->
		<!-- DO NOT USE as it seems to have a built-in assumption
		 *** that the help is all in one file.
		<java classname="com.sun.java.help.search.Indexer" 
			classpath="lib/jhall.jar"
			fork="true" failonerror="true">
			<arg value="${build}/help"/>
		</java>
		<mkdir dir="${build}/help/JavaHelpSearch"/>
		<move todir="${build}/help/JavaHelpSearch">
			<fileset dir="JavaHelpSearch" includes="**"/>
		</move>
		-->
		<!-- So, remove the search view from the JavaHelp config -->
		<replace file="${build}/help/jhelpset.hs" value="">
			<replacetoken><![CDATA[<view><name>Search</name><label>Search</label><type>javax.help.SearchView</type><data engine="com.sun.java.help.search.DefaultSearchEngine">JavaHelpSearch</data></view>]]></replacetoken>
		</replace>
		
		<!-- Add the Favorites/Bookmarks views into the JavaHelp Config -->
		<replace file="${build}/help/jhelpset.hs" token="&lt;/helpset>"
			value="&lt;view>&lt;name>favorites&lt;/name>&lt;label>Favorites&lt;/label>&lt;type>javax.help.FavoritesView&lt;/type>&lt;/view>&lt;/helpset>"/>

		<!-- Copy the images and icons; the DocBook files have
			these horrid "src/" and "doc/" paths prepended
			so we have to preserve these here -->			
		<mkdir dir="${build}/help/doc/images"/>		
		<copy todir="${build}/help/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>
		
		<mkdir dir="${build}/help/src/icons"/>
		<copy todir="${build}/help/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>				
			</fileset>
		</copy>
		
		<!-- Jar the whole mess up and add to working classpath -->
		<jar file="lib/architecthelp.jar" basedir="${build}/help" update="false">
		</jar>
	</target>
	
	<!-- Build the HTML -->
	<target name="html" depends="xslt-stripwidths" description="Create user guide in HTML">
		<mkdir dir="${build}/ca/sqlpower/architect/doc/" />
		
		<xslt
			style="doc/tools/xslt/html/chunk.xsl"
			in="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			out="${build}/ca/sqlpower/architect/doc/PowerArchitectUserGuide.html"
			classpathref="docbookclasspath">
		</xslt>
		
		<!-- Warning: This is an extremely evil hack to get the product out the door!
		              See bugzilla 1195 for details -->
		<mkdir dir="${build}/ca/sqlpower/architect/doc/doc/images" />		
		<copy todir="${build}/ca/sqlpower/architect/doc/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>
		<mkdir dir="${build}/ca/sqlpower/architect/doc/src/icons" />		
		<copy todir="${build}/ca/sqlpower/architect/doc/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>				
			</fileset>
		</copy>
	</target>

	<!-- Convert User Manual from XML to FO -->
	<target name="fo" depends="init" description="Create user guide in XML Formatting Objects">
		<mkdir dir="${build}/doc/" />
        <xslt 
			style="doc/tools/xslt/fo/docbook.xsl"
			in="doc/PowerArchitectUserGuide.xml" 
			out="${build}/doc/PowerArchitectUserGuide.fo"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Finish it, from FO to PDF -->
	<target name="pdf" depends="fo" description="Create user guide in PDF">
		<path id="fop-classpath">
			<fileset dir="doc/tools/xalan">
			  <include name="*.jar"/>
			</fileset>
			<fileset dir="doc/tools/fop">
			  <include name="*.jar"/>
			</fileset>
		</path>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" classpathref="fop-classpath"/>
        <fop format="application/pdf" messagelevel="info" relativebase="true" >
			<fileset dir=".">
				<include name="${build}/doc/*.fo"/>
			</fileset>
		</fop>

    </target>
	
    <!-- Creates a WebStart distribution under the webstart/ directory -->
	<target name="webstart_dist" depends="stage">
        <mkdir dir="webstart/lib"/>
		<jar destfile="webstart/lib/architect.jar" update="no"
			basedir="${build}" includes="ca/** icons/** log4j.properties" 
			manifest="manifest">
		</jar>
        <copy todir="webstart/">
            <fileset dir="lib" includes="*.jar"/>
        </copy>
		
	</target>

    <!-- Copy the main Jar file, and dependent libs, to the deploy dir. 
     -->
    <target name="stage" depends="compile,userguide">
    		<mkdir dir="${deploy.dir}" />
        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${staging.dir}/lib"/>
    		<jar destfile="${staging.dir}/architect.jar" update="no"
    				basedir="${build}" includes="ca/** icons/** log4j.properties" 
    				manifest="manifest">
    		</jar>
    	    <copy todir="${staging.dir}/lib">
    	        <fileset dir="lib" includes="*.jar"/>
    	    </copy>
    		<!-- No point in signing until we have a certificate that's signed by a CA
    	    <signjar alias="sqlpower" keystore="keystore" storepass="low_security" keypass="low_security">
    	        <fileset dir="webstart/lib"/>
    	    </signjar>
    	        -->
	</target>

	<target name="run" depends="compile">
		<java fork="true" classname="ca.sqlpower.architect.swingui.ArchitectFrame" classpathref="test.classpath">
			<jvmarg value="-Dlog4j.configuration=log4j.properties"/>
		</java>
	</target>

	<target name="clean" depends="init">
		<delete dir="${build}"/>
		<delete dir="webstart/lib"/>
		<delete dir="${staging.dir}"/>
		<delete dir="${deploy.dir}" />
	</target>
	
	<target name="dist-clean" depends="clean">
		<delete >
			<fileset dir="deploy" excludes="CVS/">
			</fileset>
		</delete>
	</target>

	<path id="compile.classpath">
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<pathelement location="build"/>
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="javadoc" depends="compile">
		<mkdir dir="${build}/docs/api"/>
		<javadoc sourcepath="${src}" destdir="${build}/docs/api"
			packagenames="ca.sqlpower.*"
			maxmemory="100m" 
			windowtitle="ca.sqlpower.architect.* Power*Architect"
			Version="true" Author="true" Use="true"
			Overview="html/overview.html"
			classpathref="test.classpath"
			>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="ca/sqlpower/**" />
				<exclude name="regress/**"/>
			</packageset>
			<bottom><![CDATA[<i>Copyright &#169; 2003-2006 SQL Power Group Inc. <a href="http://www.sqlpower.ca/">www.sqlpower.ca</a>]]></bottom>
		</javadoc>
		<copy file="html/index.html" todir="${build}/docs"/>

	</target>
	
	
	<target name="windows_installer" depends="stage">
		<izpack output="${deploy.dir}/Architect-Setup-Windows-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.jar"
		        installerType="standard"
			    basedir="${installer.dir}"
		        izPackDir="${izpack.dir}/">
		
		<config><![CDATA[
			<installation version="1.0">
				<!-- comment -->
				<info>
					<appname>Power Architect</appname>
					<appversion>@{app_ver_major}.@{app_ver_minor}.@{app_ver_tiny}</appversion>
					<url>http://www.sqlpower.ca/</url>
					<javaversion>1.5</javaversion>
				</info>
				<guiprefs height="600" resizable="yes" width="800">
					<laf name="metouia">
						<os family="unix"/>
					</laf>
				</guiprefs>
				
				<locale>
					<langpack iso3="eng"/>
				</locale>
				<resources>
					<res id="Installer.image" src="../src/icons/architect.png"/>
					<res src="ArchitectShortcut.xml" id="shortcutSpec.xml"/>
				</resources>
				<panels>
					<panel classname="HelloPanel"/>
					<panel classname="TargetPanel"/>
					<panel classname="InstallPanel"/>
					<panel classname="ShortcutPanel"/>
					<panel classname="SimpleFinishPanel"/>
				</panels>
				<packs>
					<pack name="Core" required="yes">
						<description>Architect Core Files</description>
						<fileset dir="../staging/" targetdir="$INSTALL_PATH">
							<include name="architect.jar"/>
						</fileset>
						<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="." targetdir="$INSTALL_PATH">
							<include name="*.reg"/>
						</fileset>
						<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
							<include name="*.ico"/>
						</fileset>
						<parsable targetfile="${INSTALL_PATH}/architect_file_association.reg" type="windowsreg"/>
						<executable targetfile="regedit.exe" stage="postinstall" keep="true">
						   <args>
						     <arg value="\/s"/>
						     <arg value="$INSTALL_PATH/architect_file_association.reg"/>
					      </args>
					   </executable>
						<executable targetfile="regedit.exe" stage="uninstall" keep="true">
						   <args>
						     <arg value="\/s"/>
						     <arg value="$INSTALL_PATH/uninstall.reg"/>
					      </args>
					   </executable>
					</pack>
				</packs>
				<native type="izpack" name="ShellLink.dll"/>
			</installation>
			]]>		
		</config>
		</izpack>
	</target>

	<target name="osx_dist" depends="stage">
		
		<!-- The pre-compiled osx adapter class (it only compiles on OS X) -->
		<copy file="osx_packaging_utils/osx_adapter.jar" todir="${staging.dir}/lib"/>
		
		<!-- jarbundler is from sourceforge, defined near top of file -->
		<jarbundler dir="${staging.dir}"
           name="Power Architect"
           version="${app_ver_major}.${app_ver_minor}.${app_ver_tiny}"
           mainclass="ca.sqlpower.architect.swingui.ArchitectFrame"
           icon="src/icons/Power Architect.icns"
           jvmversion="1.5+"
           shortname="Architect"
           stubfile="osx_packaging_utils/PowerArchitectStub"
           vmoptions="-Xmx600m">
			<jarfileset dir="${staging.dir}/lib" includes="*.jar"/>
			<jarfileset dir="${staging.dir}" includes="architect.jar"/>
		</jarbundler>
	</target>
	
	<!-- This target will only work on OS X (it needs the hdiutil command) -->

	<target name="osx_dmg" depends="osx_dist" if="isMac">
		<!-- hdiutil create -size 50m -fs HFS+ -volname "Power*Architect" RWArchitect.dmg
				     hdiutil attach RWArchitect.dmg
				     (copy architect.app over, position it, etc)
				     /Developer/Tools/SetFile -a V /Volumes/Power\*Architect/install_folder_background.png
				     hdiutil detach /Volumes/Power\*Architect/
				     rm Power_Architect-1.0.19.dmg
				     hdiutil convert -format UDCO -o Power_Architect-1.0.19.dmg RWArchitect.dmg
				  -->
		<copy file="osx_packaging_utils/RWArchitect.dmg.sparseimage" tofile="${staging.dir}/RWArchitect.dmg.sparseimage" overwrite="true" />
		<exec executable="hdiutil">
					<arg value="detach" />
					<arg value="/Volumes/Power*Architect" />
		</exec>
		<exec executable="hdiutil">
			<arg value="attach" />
			<arg value="${staging.dir}/RWArchitect.dmg.sparseimage" />
		</exec>
		<copy todir="/Volumes/Power*Architect/" overwrite="true" >
			<fileset dir="${staging.dir}/Power Architect.app"></fileset>
		</copy>
		
		<exec executable="hdiutil">
			<arg value="detach" />
			<arg value="/Volumes/Power*Architect" />
		</exec>
		<delete file="${deploy.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg" />
		<exec executable="hdiutil">
			<arg value="convert"/>
			<arg value="${staging.dir}/RWArchitect.dmg.sparseimage"/>
			<arg value="-format"/>
			<arg value="UDCO"/>
			<arg value="-o"/>
			<arg value="${deploy.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg"/>
		</exec>
	</target>
	
	<target name="osx_tgz" depends="osx_dist" if="isNotMac">
		<tar destfile="${deploy.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.tar.gz"
					compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Power Architect.app/**"/>
		</tar>	
	</target>
	
	<!-- Build a "generic" (e.g., UNIX) install that users will just un-tar -->
    <target name="generic_install" depends="stage">
		<tar destfile="${deploy.dir}/Architect-generic-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.tar.gz"
			compression="gzip">
			<tarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<tarfileset dir="${staging.dir}" includes="architect.jar"/>
		</tar>
    </target>
	
	<target name="dist" depends="windows_installer,generic_install,osx_tgz,osx_dmg"><!-- ,osx_dmg -->
	    <copy tofile="${deploy.dir}/index.html" file="html/SQL Power - PowerArchitect.html"/>
		<replace file="${deploy.dir}/index.html">
			<replacefilter token="@@app_ver_major" value="${app_ver_major}"/>
			<replacefilter token="@@app_var_minor" value="${app_ver_minor}"/>
			<replacefilter token="@@app_ver_tiny" value="${app_ver_tiny}"/>		
		</replace>
	</target>
</project>