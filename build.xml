<project name="architect" default="dist" basedir=".">

	<!-- $Id$ -->

	<!-- Optional per-user customization -->
	<property file="${user.home}/build.properties" />
	<!-- Optional directory customization -->
	<property file="build.properties" />

	<property name="src" value="src"/>
	<property name="lib" value="lib"/>
	<property name="build" value="build"/>
	<property name="build.compiler" value="modern"/>
	<property name="installer.dir" value="installer"/>
	<!-- The staging directory is a temp dir that is used as a base for all the distributions -->
	<property name="staging.dir" value="staging" />

	<!-- findbugs -->
	<property name="findbugs.home" value="ext-tools-home/findbugs"/>
	<property name="findbugs-ant.jar" value="${findbugs.home}/lib/findbugs-ant.jar"/>

	<!-- pmd and its helper jar files -->
	<property name="pmd.home" value="ext-tools-home/pmd"/>
	<property name="pmd.jar" value="${pmd.home}/lib/pmd-3.9.jar"/>

	<!-- izpack needs both a jar and its own directory	-->
	<property name="izpack.dir" value="ext-tools-home/izpack"/>
	<taskdef name="izpack" classpath="${izpack.dir}/lib/compiler.jar" classname="com.izforge.izpack.ant.IzPackTask"/>

	<!-- clover -->
	<property name="clover.home" value="ext-tools-home/clover"/>

	<!-- os x utils -->
	<taskdef name="jarbundler" classpath="osx_packaging_utils/jarbundler.jar:osx_packaging_utils/xercesImpl.jar:osx_packaging_utils/xml-apis.jar" classname="net.sourceforge.jarbundler.JarBundler"/>

	<condition property="isMac">
		<os family="mac"/>
	</condition>

	<condition property="isNotMac">
		<not>
			<os family="mac"/>
		</not>
	</condition>

	<target name="init">
		<echo message="Note, this build script requires Ant 1.7 or newer"/>
		<tstamp/>
		<mkdir dir="${build}"/>
		<!-- get the version number from source code ArchitectUtils -->
		<javac srcdir="${src}" destdir="${build}" classpathref="compile.classpath" includes="ca/sqlpower/architect/antbuild/ArchitectVersionTask.java" debug="true" deprecation="true" />
		<taskdef name="genVersion"
					classname="ca.sqlpower.architect.antbuild.ArchitectVersionTask"
			        classpath="build"/>
		<genVersion/>
		<echo message="Building Architect version: ${app_ver_major}.${app_ver_minor}.${app_ver_tiny}"> </echo>
		<property name="dist.dir" value="dist/architect-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}"/>
		<mkdir dir="${dist.dir}"/>
	</target>

	<!-- The routine tests that work can get listed here.
	*** Right now findbugs runs out of memory
	-->
	<target name="alltests" depends="junit,pmd"/>

	<target name="with.clover">
	    <clover-setup initString="mycoverage.db" source="1.5">
	    <statementContext name="iflog" regexp="^if ?\( ?logger.is.*"/>
	    </clover-setup>
	</target>

	<target name="clover.html" depends="with.clover">
	    <clover-report>
	        <current outfile="/Users/fuerth/Sites/architect_clover_html">
	            <format type="html" filter="iflog" />
	        </current>
	    </clover-report>
	</target>

	<target name="clover.swing" depends="with.clover">
	    <clover-view/>
	</target>

	<target name="clover.summary" depends="with.clover">
	    <clover-report>
	    	<current summary="yes" outfile="coverage.pdf">
		    <format type="pdf"/>
		</current>
	    </clover-report>
	</target>

	<target name="pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
			classpath="${pmd.jar}"/>
		<property name="pmd-results" value="pmd-ant-results.txt"/>
		<pmd shortFilenames="true">
			<ruleset>basic,imports</ruleset>
			<formatter type="text" toFile="${pmd-results}"/>
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		<echo message="PMD completed, output is in  ${pmd-results}."/>
	</target>

	<target name="pmd-cpd">
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"
			classpath="${pmd.jar}"/>
		<property name="cpd-results" value="cpd-ant-results.txt"/>
		<cpd minimumTokenCount="120" outputFile="cpd-report.txt" outputfile="${cpd-results}">
			<fileset dir="${src}">
				<include name="**/*.java"/>
				<exclude name="generated/**.java"/>
			</fileset>
		</cpd>
		<echo message="CPD completed, output is in  ${cpd-results}."/>
	</target>

	<target name="findbugs" depends="compile">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
			classpath="${findbugs-ant.jar}"/>
		<findbugs home="${findbugs.home}"
			output="text"
			outputFile="findbugs-ant-results.txt"
			reportLevel="low">
			<class location="${build}" />
			<sourcePath path="${src}" />
			<!-- Classes needed by our code but that we don't want tested -->
			<auxClasspath path="${pmd.jar}" />
			<systemProperty name="findbugs.maskedfields.locals" value='true'/>
		</findbugs>
	</target>

	<target name="junit" depends="compile,compile-tests">
	   <junit printsummary="withOutAndErr">
	       <classpath><path refid="test.classpath"/></classpath>
	       <test name="ca.sqlpower.ArchitectBusinessTestSuite"/>
           <test name="ca.sqlpower.ArchitectAutoTests"/>
	   </junit>
	</target>

	<target name="compile" depends="init,copyfiles">
		<javac srcdir="${src}" destdir="${build}"
			classpathref="compile.classpath"
			debug="true" deprecation="true"
			>
         </javac>
	</target>

	<target name="compile-tests" depends="compile">
		<javac srcdir="regress" destdir="${build}"
			classpathref="test.classpath"
			debug="true" deprecation="true"
			>
		</javac>
	</target>

    <!-- copies non-source files that need to be in the architect.jar. -->
	<target name="copyfiles" depends="init">
		<mkdir dir="${build}/icons"/>
        <copy todir="${build}/icons">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>
		<!-- copies the template log4j config file into the build dir -->
		<copy tofile="${build}/log4j.properties"
			file="src/log4j.properties.example"/>
    </target>

	<!-- DOCUMENTATION
		There are THREE main documentation targets, all built from the
		docbook XML file docs/PowerArchitectUsersGuide:
			help - JavaHelp (jarred and shipped)
			html - for quick viewing on our web site
			PDF - because we can :-)
	-->

	<!-- NOTE: All XSLT steps currently require xalan on classpath since JDK1.5 is behind -->
	<path id="docbookclasspath">
		<fileset dir="doc/tools/xalan">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="userguide" depends="help,pdf" description="Creates user guide in HTML and PDF">
	</target>

	<!-- Create an intermediate docbook document - for use both by help and html -
	with no width attributes on the images (the Swing HTML browser chokes
	when there is width but no height in an image tag)
	-->
	<target name="xslt-stripwidths">
		<xslt
			style="doc/tools/strip-width.xsl"
			in="doc/PowerArchitectUserGuide.xml"
			out="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Build the Help (JavaHelp, HTML-based format).
	 ** Note that at this time you must NOT have spaces in your
	 ** path (e.g., an Eclipse Workspace under "Documents and Settings"
	 ** will fail out because it changes spaces in filenames to %20.
	 -->
	<target name="help" depends="xslt-stripwidths" description="Create JavaHelp">
		<mkdir dir="${build}/help"/>
		<xslt
			style="doc/tools/xslt/javahelp/javahelp.xsl"
			in="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			out="${build}/help/zzz"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Index it I: limited-terms index: created manually, just copy it,
		 *** overwriting empty one that DocBook Javahelp made.
		 -->
		<copy file="doc/jhelpidx.xml" todir="${build}/help" overwrite="true"/>

		<!-- Index it II: full text search -->
		<!-- DO NOT USE as it seems to have a built-in assumption
		 *** that the help is all in one file.
		<java classname="com.sun.java.help.search.Indexer"
			classpath="lib/jhall.jar"
			fork="true" failonerror="true">
			<arg value="${build}/help"/>
		</java>
		<mkdir dir="${build}/help/JavaHelpSearch"/>
		<move todir="${build}/help/JavaHelpSearch">
			<fileset dir="JavaHelpSearch" includes="**"/>
		</move>
		-->
		<!-- So, remove the search view from the JavaHelp config -->
		<replace file="${build}/help/jhelpset.hs" value="">
			<replacetoken><![CDATA[<view><name>Search</name><label>Search</label><type>javax.help.SearchView</type><data engine="com.sun.java.help.search.DefaultSearchEngine">JavaHelpSearch</data></view>]]></replacetoken>
		</replace>

		<!-- Add the Favorites/Bookmarks views into the JavaHelp Config -->
		<replace file="${build}/help/jhelpset.hs"
			token="jhelpidx.xml&lt;/data>&lt;/view>&lt;/helpset>"
			value="jhelpidx.xml&lt;/data>&lt;/view>&lt;view>&lt;name>favorites&lt;/name>&lt;label>Favorites&lt;/label>&lt;type>javax.help.FavoritesView&lt;/type>&lt;/view>&lt;/helpset>"/>

		<!-- Copy the images and icons; the DocBook files have
			these horrid "src/" and "doc/" paths prepended
			so we have to preserve these here -->
		<mkdir dir="${build}/help/doc/images"/>
		<copy todir="${build}/help/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>

		<mkdir dir="${build}/help/src/icons"/>
		<copy todir="${build}/help/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>

		<!-- Jar the whole mess up and add to working classpath -->
		<jar file="${build}/architecthelp.jar" basedir="${build}/help" update="false">
		</jar>
	</target>

	<!-- Build the HTML -->
	<target name="html" depends="xslt-stripwidths" description="Create user guide in HTML">
		<mkdir dir="${build}/ca/sqlpower/architect/doc/" />

		<xslt
			style="doc/tools/xslt/html/chunk.xsl"
			in="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			out="${build}/ca/sqlpower/architect/doc/PowerArchitectUserGuide.html"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Warning: This is an extremely evil hack to get the product out the door!
		              See bugzilla 1195 for details -->
		<mkdir dir="${build}/ca/sqlpower/architect/doc/doc/images" />
		<copy todir="${build}/ca/sqlpower/architect/doc/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>
		<mkdir dir="${build}/ca/sqlpower/architect/doc/src/icons" />
		<copy todir="${build}/ca/sqlpower/architect/doc/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>
	</target>

	<!-- Convert User Manual from XML to FO -->
	<target name="fo" depends="init" description="Create user guide in XML Formatting Objects">
		<mkdir dir="${build}/doc/" />
        <xslt
			style="doc/tools/xslt/fo/docbook.xsl"
			in="doc/PowerArchitectUserGuide.xml"
			out="${build}/doc/PowerArchitectUserGuide.fo"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Finish it, from FO to PDF -->
	<target name="pdf" depends="fo" description="Create user guide in PDF">
		<path id="fop-classpath">
			<fileset dir="doc/tools/xalan">
			  <include name="*.jar"/>
			</fileset>
			<fileset dir="doc/tools/fop">
			  <include name="*.jar"/>
			</fileset>
		</path>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" classpathref="fop-classpath"/>
        <fop format="application/pdf" messagelevel="info" relativebase="true" >
			<fileset dir=".">
				<include name="${build}/doc/*.fo"/>
			</fileset>
		</fop>

    </target>

    <!-- Creates a WebStart distribution under the webstart/ directory -->
	<target name="webstart_dist" depends="stage">
        <mkdir dir="webstart/lib"/>
		<jar destfile="webstart/lib/architect.jar" update="no"
			basedir="${build}" includes="ca/** icons/** log4j.properties"
			manifest="manifest">
		</jar>
        <copy todir="webstart/">
            <fileset dir="lib" includes="*.jar"/>
        </copy>

	</target>

    <!-- Create the Architect jar file.
     *** Copy the Architect Jar file, and dependent libs, to the deploy dir.
     -->
    <target name="stage" depends="compile,userguide">
    	<mkdir dir="${dist.dir}" />
        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${staging.dir}/lib"/>
        <mkdir dir="${staging.dir}/jdbc"/>
    	<mkdir dir="${staging.dir}/doc"/>

    	<copy todir="${staging.dir}/lib">
    	    <fileset dir="lib" includes="*.jar"/>
    		<fileset dir="${build}" includes="architecthelp.jar" />
    	</copy>

    	<!-- This is an Ant 1.7 feature. To upgrade if using Eclipse 3.x,
    	     1. Download the latest Ant from http://ant.apache.org/bindownload.cgi
    	     2. Extract it somewhere
    	     3. Under window, preferences select Ant runtime in the tree
    	     4. Set the Ant home to be the folder that Ant was extracted to -->
    	<manifestclasspath property="architect.jar.classpath"
    	    	                       jarfile="${staging.dir}/architect.jar">
    	    		<classpath>
    		    		<pathelement path="${staging.dir}/jdbc"/>
    	    			<fileset dir="${staging.dir}/">
    	    				<include name="lib/*.jar"/>
    	    			</fileset>
    	    		</classpath>
    	    	 </manifestclasspath>

    	<manifest file="${build}/manifest">
    		<attribute name="Main-Class" value="ca.sqlpower.architect.swingui.ArchitectFrame"/>
    		<attribute name="Class-Path" value="${architect.jar.classpath}" />
    	</manifest>

    	<jar destfile="${staging.dir}/architect.jar" update="no"
    				basedir="${build}" includes="ca/** icons/** log4j.properties default_database_types.ini"
    				manifest="${build}/manifest">
    	</jar>
		<copy todir="${staging.dir}/jdbc">
		    <fileset dir="jdbc_drivers" includes="*.jar"/>
			<fileset dir="src" includes="default_database_types.ini"/>
	    </copy>
    	<copy todir="${staging.dir}/doc">
        	<fileset dir="${build}/doc" includes="*.pdf"/>
    	   	<fileset dir="${build}/doc" includes="*.txt"/>
    	</copy>

    	<!-- The src for libraries that we are required to redistribute src -->
    	<copy file="libsrc/itext-src-1.4.8.zip" todir="${staging.dir}/libsrc"/>

    	<copy todir="${staging.dir}" file="Architect License.txt"/>

    	<!-- No point in signing until we have a certificate that's signed by a CA
    	<signjar alias="sqlpower" keystore="keystore" storepass="low_security" keypass="low_security">
    	   <fileset dir="webstart/lib"/>
    	</signjar>
    	-->
	</target>

	<target name="run" depends="compile">
		<java fork="true" classname="ca.sqlpower.architect.swingui.ArchitectFrame" classpathref="test.classpath">
			<jvmarg value="-Dlog4j.configuration=log4j.properties"/>
		</java>
	</target>

	<target name="clean" depends="init">
		<delete dir="${build}"/>
		<delete><fileset dir="${dist.dir}" includes="lib,Power*Architect.app,architect.jar"/></delete>
		<delete dir="webstart/lib"/>
		<delete dir="${staging.dir}"/>
	</target>

	<target name="dist-clean" depends="clean">
		<delete dir="${dist.dir}" />
	</target>

	<path id="compile.classpath">
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<pathelement location="build"/>
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="javadoc" depends="compile">
		<mkdir dir="${build}/docs/api"/>
		<javadoc sourcepath="${src}" destdir="${build}/docs/api"
			packagenames="ca.sqlpower.*"
			maxmemory="100m"
			windowtitle="ca.sqlpower.architect.* Power*Architect"
			Version="true" Author="true" Use="true"
			Overview="html/overview.html"
			classpathref="test.classpath"
			>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="ca/sqlpower/**" />
				<exclude name="regress/**"/>
			</packageset>
			<bottom><![CDATA[<i>Copyright &#169; 2003-2007 SQL Power Group Inc. <a href="http://www.sqlpower.ca/">www.sqlpower.ca</a>]]></bottom>
		</javadoc>
		<copy file="html/index.html" todir="${build}/docs"/>

	</target>


	<target name="windows_installer" depends="stage">
		<izpack output="${dist.dir}/Architect-Setup-Windows-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.jar"
		        installerType="standard"
			    basedir="${installer.dir}"
		        izPackDir="${izpack.dir}/">

		<config><![CDATA[
			<installation version="1.0">
				<!-- comment -->
				<info>
					<appname>Power Architect</appname>
					<appversion>@{app_ver_major}.@{app_ver_minor}.@{app_ver_tiny}</appversion>
					<url>http://www.sqlpower.ca/</url>
					<javaversion>1.5</javaversion>
				</info>
				<guiprefs height="600" resizable="yes" width="800">
					<laf name="metouia">
						<os family="unix"/>
					</laf>
				</guiprefs>

				<locale>
					<langpack iso3="eng"/>
				</locale>
				<resources>
					<res id="Installer.image" src="../src/icons/architect.png"/>
					<res src="ArchitectShortcut.xml" id="shortcutSpec.xml"/>
					<res id="LicencePanel.licence" src="../Architect License.txt" />
				</resources>
				<panels>
					<panel classname="HelloPanel"/>
					<panel classname="LicencePanel"/>
					<panel classname="TargetPanel"/>
					<panel classname="InstallPanel"/>
					<panel classname="ShortcutPanel"/>
					<panel classname="SimpleFinishPanel"/>
				</panels>
				<packs>
					<pack name="Core" required="yes">
						<description>Architect Core Files</description>
						<fileset dir="../staging/" targetdir="$INSTALL_PATH">
							<include name="architect.jar"/>
						</fileset>
						<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="../staging/doc" targetdir="$INSTALL_PATH/doc">
							<include name="*.pdf"/>
							<include name="*.txt"/>
						</fileset>
						<fileset dir="../staging/jdbc" targetdir="$INSTALL_PATH/jdbc">
							<include name="*.ini"/>
						</fileset>
						<fileset dir=".." targetdir="$INSTALL_PATH">
							<include name="../staging/Architect License.txt"/>
						</fileset>
						<fileset dir="." targetdir="$INSTALL_PATH">
							<include name="*.reg"/>
						</fileset>
						<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
							<include name="*.ico"/>
						</fileset>
						<parsable targetfile="${INSTALL_PATH}/architect_file_association.reg" type="windowsreg"/>
						<executable targetfile="regedit.exe" stage="postinstall" keep="true">
						   <args>
						     <arg value="\/s"/>
						     <arg value="$INSTALL_PATH/architect_file_association.reg"/>
					      </args>
					   </executable>
						<executable targetfile="regedit.exe" stage="uninstall" keep="true">
						   <args>
						     <arg value="\/s"/>
						     <arg value="$INSTALL_PATH/uninstall.reg"/>
					      </args>
					   </executable>
					</pack>
				</packs>
				<native type="izpack" name="ShellLink.dll"/>
			</installation>
			]]>
		</config>
		</izpack>
	</target>

	<target name="windows_jdbc_installer" depends="stage">
			<izpack output="${dist.dir}/Architect-Setup-Windows-jdbc-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.jar"
			        installerType="standard"
				    basedir="${installer.dir}"
			        izPackDir="${izpack.dir}/">

			<config><![CDATA[
				<installation version="1.0">
					<!-- comment -->
					<info>
						<appname>Power Architect</appname>
						<appversion>@{app_ver_major}.@{app_ver_minor}.@{app_ver_tiny}</appversion>
						<url>http://www.sqlpower.ca/</url>
						<javaversion>1.5</javaversion>
					</info>
					<guiprefs height="600" resizable="yes" width="800">
						<laf name="metouia">
							<os family="unix"/>
						</laf>
					</guiprefs>

					<locale>
						<langpack iso3="eng"/>
					</locale>
					<resources>
						<res id="Installer.image" src="../src/icons/architect.png"/>
						<res src="ArchitectShortcut.xml" id="shortcutSpec.xml"/>
						<res id="LicencePanel.licence" src="../Architect License.txt" />
					</resources>
					<panels>
						<panel classname="HelloPanel"/>
						<panel classname="LicencePanel"/>
						<panel classname="TargetPanel"/>
						<panel classname="InstallPanel"/>
						<panel classname="ShortcutPanel"/>
						<panel classname="SimpleFinishPanel"/>
					</panels>
					<packs>
						<pack name="Core" required="yes">
							<description>Architect Core Files</description>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="architect.jar"/>
							</fileset>
							<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
								<include name="*.jar"/>
							</fileset>
							<!-- the directory jdbc is referenced in the manifest as well as
								various targets. -->
							<fileset dir="../staging/jdbc" targetdir="$INSTALL_PATH/jdbc">
								<include name="*.jar"/>
								<include name="*.ini"/>
							</fileset>
							<fileset dir="../staging/doc" targetdir="$INSTALL_PATH/doc">
								<include name="*.pdf"/>
								<include name="*.txt"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="Architect License.txt"/>
							</fileset>
							<fileset dir="." targetdir="$INSTALL_PATH">
								<include name="*.reg"/>
							</fileset>
							<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
								<include name="*.ico"/>
							</fileset>
							<parsable targetfile="${INSTALL_PATH}/architect_file_association.reg" type="windowsreg"/>
							<executable targetfile="regedit.exe" stage="postinstall" keep="true">
							   <args>
							     <arg value="\/s"/>
							     <arg value="$INSTALL_PATH/architect_file_association.reg"/>
						      </args>
						   </executable>
							<executable targetfile="regedit.exe" stage="uninstall" keep="true">
							   <args>
							     <arg value="\/s"/>
							     <arg value="$INSTALL_PATH/uninstall.reg"/>
						      </args>
						   </executable>
						</pack>
					</packs>
					<native type="izpack" name="ShellLink.dll"/>
				</installation>
				]]>
			</config>
			</izpack>
		</target>

	<target name="osx_adapter_jar"
			description="Creates the osx_packaging_utils/osx_adapter.jar file (only works on OSX)">
		<javac srcdir="osx_packaging_utils"
   			   destdir="${build}"
			   includes="ca/sqlpower/architect/swingui/OSXAdapter.java"
			   />
		<jar destfile="osx_packaging_utils/osx_adapter.jar"
			 basedir="${build}"
			 includes="ca/sqlpower/architect/swingui/OSXAdapter.class"/>
	</target>

	<target name="osx_dist" depends="stage">
		<!-- The pre-compiled osx adapter class (it only compiles on OS X) -->
		<copy file="osx_packaging_utils/osx_adapter.jar" todir="${staging.dir}/lib"/>

		<!-- jarbundler is from sourceforge, defined near top of file -->
		<jarbundler dir="${staging.dir}"
           name="Power Architect"
           version="${app_ver_major}.${app_ver_minor}.${app_ver_tiny}"
           mainclass="ca.sqlpower.architect.swingui.ArchitectFrame"
           icon="src/icons/Power Architect.icns"
           jvmversion="1.5+"
           shortname="Architect"
           stubfile="osx_packaging_utils/PowerArchitectStub"
           vmoptions="-Xmx600m">
			<jarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<jarfileset dir="${staging.dir}" includes="architect.jar"/>
			<javafileset dir="${staging.dir}" includes="jdbc/*.ini"/>
			<extraclasspathfilelist dir="KICKME" files="jdbc"/>
		</jarbundler>

		<!-- XXX this is stupid. we should modify the jarbundler task to allow literal strings in the classpath -->
		<replace file="${staging.dir}/Power Architect.app/Contents/Info.plist"
				 token="${basedir}/KICKME"
				 value="$JAVAROOT" />
	</target>

	<target name="osx_jdbc_dist" depends="stage">
		<!-- The pre-compiled osx adapter class (it only compiles on OS X) -->
		<copy file="osx_packaging_utils/osx_adapter.jar" todir="${staging.dir}/lib"/>

		<!-- jarbundler is from sourceforge, defined near top of file -->
		<jarbundler dir="${staging.dir}"
           name="Power Architect JDBC"
           version="${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.jdbc"
           mainclass="ca.sqlpower.architect.swingui.ArchitectFrame"
           icon="src/icons/Power Architect.icns"
           jvmversion="1.5+"
           shortname="Architect"
           stubfile="osx_packaging_utils/PowerArchitectStub"
           vmoptions="-Xmx600m">
			<jarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<jarfileset dir="${staging.dir}" includes="architect.jar"/>
			<!-- Add any jdbc drivers as resources the directory jdbc is referenced
					in the manifest as well as various targets. -->
			<javafileset dir="${staging.dir}" includes="jdbc/*.jar jdbc/*.ini"/>
			<extraclasspathfilelist dir="KICKME" files="jdbc"/>
		</jarbundler>

		<!-- XXX this is stupid. we should modify the jarbundler task to allow literal strings in the classpath -->
		<replace file="${staging.dir}/Power Architect JDBC.app/Contents/Info.plist"
				 token="${basedir}/KICKME"
				 value="$JAVAROOT" />

	</target>

	<!-- This target will only work on OS X (it needs the hdiutil command) -->

	<target name="osx_dmg" depends="osx_dist" if="isMac">
		<!-- What this basically does is:
                     hdiutil create -size 50m -fs HFS+ -volname "Power*Architect" RWArchitect.dmg
				     hdiutil attach RWArchitect.dmg
				     (copy architect.app over, position it, etc)
				     /Developer/Tools/SetFile -a V /Volumes/Power\*Architect/install_folder_background.png
				     hdiutil detach /Volumes/Power\*Architect/
				     rm Power_Architect-1.0.19.dmg
				     hdiutil convert -format UDCO -o Power_Architect-1.0.19.dmg RWArchitect.dmg
				  -->
		<copy file="osx_packaging_utils/RWArchitect.dmg.sparseimage" tofile="${staging.dir}/RWArchitect.dmg.sparseimage" overwrite="true" />
		<exec executable="hdiutil">
					<arg value="detach" />
					<arg value="/Volumes/Power*Architect" />
		</exec>
		<exec executable="hdiutil">
			<arg value="attach" />
			<arg value="${staging.dir}/RWArchitect.dmg.sparseimage" />
		</exec>
		<copy todir="/Volumes/Power*Architect/Power*Architect.app/" overwrite="true"  >
			<fileset dir="${staging.dir}/Power Architect.app"></fileset>
		</copy>
		<exec executable="chmod">
			<arg value="a+x"/>
			<arg value="/Volumes/Power*Architect/Power*Architect.app/Contents/MacOS/PowerArchitectStub"/>
		</exec>
		<exec executable="hdiutil">
			<arg value="detach" />
			<arg value="/Volumes/Power*Architect" />
		</exec>
		<delete file="${dist.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg" />
		<exec executable="hdiutil">
			<arg value="convert"/>
			<arg value="${staging.dir}/RWArchitect.dmg.sparseimage"/>
			<arg value="-format"/>
			<arg value="UDCO"/>
			<arg value="-o"/>
			<arg value="${dist.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg"/>
		</exec>

		<taskdef name="addLicenseToDMG"
				 classname="ca.sqlpower.architect.antbuild.AddLicenseToDMGTask"
			     classpath="build"/>
		<addLicenseToDMG
				dmgFile="${dist.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg"
                licenseFile="${staging.dir}/Architect License.txt"
		        resourceTemplateFile="osx_packaging_utils/sla_template.r"/>
    </target>

	<target name="osx_jdbc_dmg" depends="osx_jdbc_dist" if="isMac">
			<!-- hdiutil create -size 50m -fs HFS+ -volname "Power*Architect" RWArchitect.dmg
					     hdiutil attach RWArchitect.dmg
					     (copy architect.app over, position it, etc)
					     /Developer/Tools/SetFile -a V /Volumes/Power\*Architect/install_folder_background.png
					     hdiutil detach /Volumes/Power\*Architect/
					     rm Power_Architect-1.0.19.dmg
					     hdiutil convert -format UDCO -o Power_Architect-1.0.19.dmg RWArchitect.dmg
					  -->
			<copy file="osx_packaging_utils/RWArchitect.dmg.sparseimage" tofile="${staging.dir}/RWArchitect.dmg.sparseimage" overwrite="true" />
			<exec executable="hdiutil">
						<arg value="detach" />
						<arg value="/Volumes/Power*Architect" />
			</exec>
			<exec executable="hdiutil">
				<arg value="attach" />
				<arg value="${staging.dir}/RWArchitect.dmg.sparseimage" />
			</exec>
			<delete dir="/Volumes/Power*Architect/Power*Architect.app/Contents/Resources/Java"/>
			<copy todir="/Volumes/Power*Architect/Power*Architect.app/" overwrite="true"  >
				<fileset dir="${staging.dir}/Power Architect JDBC.app"></fileset>
			</copy>
			<exec executable="chmod">
				<arg value="a+x"/>
				<arg value="/Volumes/Power*Architect/Power*Architect.app/Contents/MacOS/PowerArchitectStub"/>
			</exec>
			<exec executable="hdiutil">
				<arg value="detach" />
				<arg value="/Volumes/Power*Architect" />
			</exec>
			<delete file="${dist.dir}/Architect-OSX-jdbc-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg" />
			<exec executable="hdiutil">
				<arg value="convert"/>
				<arg value="${staging.dir}/RWArchitect.dmg.sparseimage"/>
				<arg value="-format"/>
				<arg value="UDCO"/>
				<arg value="-o"/>
				<arg value="${dist.dir}/Architect-OSX-jdbc-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg"/>
			</exec>

			<taskdef name="addLicenseToDMG"
					 classname="ca.sqlpower.architect.antbuild.AddLicenseToDMGTask"
				     classpath="build"/>
			<addLicenseToDMG
					dmgFile="${dist.dir}/Architect-OSX-jdbc-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.dmg"
	                licenseFile="${staging.dir}/Architect License.txt"
			        resourceTemplateFile="osx_packaging_utils/sla_template.r"/>
	    </target>

	<target name="osx_tgz" depends="osx_dist" if="isNotMac">
		<tar destfile="${dist.dir}/Architect-OSX-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.tar.gz"
					compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Power Architect.app/**"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.pdf"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.txt"/>
			<tarfileset dir="${staging.dir}" includes="jdbc/*.ini"/>
		</tar>
	</target>

	<target name="osx_jdbc_tgz" depends="osx_jdbc_dist" if="isNotMac">
		<tar destfile="${dist.dir}/Architect-OSX-jdbc-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.tar.gz"
					compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Power Architect JDBC.app/**"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.pdf"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.txt"/>
			<tarfileset dir="${staging.dir}" includes="jdbc/*.ini jdbc/*.jdbc"/>
		</tar>
	</target>

	<!-- Build a "generic" (e.g., UNIX) install that users will just un-tar -->
    <target name="generic_install" depends="stage">
		<tar destfile="${dist.dir}/Architect-generic-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.tar.gz"
			compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Architect License.txt"/>
			<tarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<tarfileset dir="${staging.dir}" includes="architect.jar"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.pdf"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.txt"/>
			<tarfileset dir="${staging.dir}" includes="jdbc/*.ini"/>
		</tar>
    </target>

    <target name="generic_jdbc_install" depends="stage">
		<tar destfile="${dist.dir}/Architect-generic-jdbc-${app_ver_major}.${app_ver_minor}.${app_ver_tiny}.tar.gz"
			compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Architect License.txt"/>
			<tarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<tarfileset dir="${staging.dir}" includes="architect.jar"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.pdf"/>
			<tarfileset dir="${staging.dir}/doc" includes="*.txt"/>
			<!-- the directory jdbc is referenced in the manifest as well as
											various targets. -->
			<tarfileset dir="${staging.dir}" includes="jdbc/*.jar"/>
			<tarfileset dir="${staging.dir}" includes="jdbc/*.ini"/>
		</tar>
    </target>

	<target name="jdbc_dist" depends="windows_jdbc_installer,generic_jdbc_install,osx_jdbc_tgz,osx_jdbc_dmg" />
	<target name="no_jdbc_dist" depends="windows_installer,generic_install,osx_tgz,osx_dmg" />

	<target name="dist" depends="jdbc_dist,no_jdbc_dist"
	        description="Builds Architect Distribution for all supported platforms to dist/architect-version/*">
		<echo>Don't forget to turn off all the debugging in log4j.properties!</echo>
	    <get dest="${dist.dir}/index.html" src="http://www.sqlpower.ca/page/architect_download_template"/>
		<replace file="${dist.dir}/index.html">
			<replacefilter token="&lt;head&gt;" value="&lt;head&gt;&lt;base href=&quot;http://www.sqlpower.ca/&quot;/&gt;"/>
			<replacefilter token="@@app_ver_major" value="${app_ver_major}"/>
			<replacefilter token="@@app_ver_minor" value="${app_ver_minor}"/>
			<replacefilter token="@@app_ver_tiny" value="${app_ver_tiny}"/>
		</replace>
		<echo>Did you forget to turn off all the debugging in log4j.properties?!</echo>
	</target>
</project>
