<?xml version="1.0" encoding="utf-8"?>
<!--

 Power*Architect Ant build file

-->
<project name="architect" default="dist" basedir=".">

	<!-- $Id$ -->

	<!-- Optional per-user customization -->
	<property file="${user.home}/build.properties" />

	<!-- Optional directory customization -->
	<property file="build.properties" />

	<!-- The directory where the Java source files are -->
	<property name="src" value="src"/>
	
	<!-- The directory with all the JAR files that are required
	     by the Architect at runtime -->
	<property name="lib" value="lib"/>
	
	<!-- The target build directory for compiled classes, docs,
	     tests, and more. The contents of this dir will eventually
	     get added to the architect.jar file. -->
	<property name="build" value="build"/>
	
	<!-- The java compiler to use. See Ant docs for details. -->
	<property name="build.compiler" value="modern"/>

	<!-- The staging directory is a temp dir that is used as a base for all
	     the OS-dependant distributions -->
	<property name="staging.dir" value="staging" />

	<!-- Windows installer tool: izpack (needs both a jar and its own
	     directory to run properly) -->
	<property name="izpack.dir" value="ext-tools-home/izpack"/>
	<taskdef name="izpack" classpath="${izpack.dir}/lib/compiler.jar"
		     classname="com.izforge.izpack.ant.IzPackTask"/>

	<!-- Base directory for the izpack (Windows) installer output -->
	<property name="installer.dir" value="installer"/>

	<!-- OS X .app bundling tool: jarbundler -->
	<taskdef name="jarbundler" 
		classpath="osx_packaging_utils/jarbundler.jar:osx_packaging_utils/xercesImpl.jar:osx_packaging_utils/xml-apis.jar"
		classname="net.sourceforge.jarbundler.JarBundler"/>

	<!-- findbugs code checking tool -->
	<property name="findbugs.home" value="ext-tools-home/findbugs"/>
	<property name="findbugs-ant.jar" value="${findbugs.home}/lib/findbugs-ant.jar"/>

	<!-- pmd code checking tool and its helper jar files -->
	<property name="pmd.home" value="ext-tools-home/pmd"/>
	<property name="pmd.jar" value="${pmd.home}/lib/pmd-3.9.jar"/>

	<!-- clover test coverage tool -->
	<property name="clover.home" value="ext-tools-home/clover"/>
	<taskdef resource="clovertasks"/>
	<typedef resource="clovertypes"/>

	<!-- When the build runs on a Mac, we can create the .dmg disk image
	     using the native hdiutil program.  Otherwise, we just make a .tar.gz.
	-->
	<condition property="isMac">
		<os family="mac"/>
	</condition>

	<condition property="isNotMac">
		<not>
			<os family="mac"/>
		</not>
	</condition>

	<target name="init" depends="checkAntVersion, checkBuildPath"
		description="Checks build prereqs, creates output dir, and determines product version"
		>
		<tstamp/>
		<mkdir dir="${build}"/>
		<!-- get the version number from source code ArchitectUtils -->
		<javac srcdir="${src}" destdir="${build}" classpathref="compile.classpath" includes="ca/sqlpower/architect/antbuild/ArchitectVersionTask.java" debug="true" deprecation="true" />
		<taskdef name="genVersion"
					classname="ca.sqlpower.architect.antbuild.ArchitectVersionTask"
			        classpath="build"/>
		<genVersion/>
		<tstamp>
			<format property="date" pattern="yyyyMMdd"/>
		</tstamp>
		<!-- If the nightly build property is set, then version number uses the date as the suffix -->
		<condition property="app.ver.suffix" value="-${date}">
			<isset property="nightly"/>
		</condition>
		<!-- Else, if app_ver_suffix is empty, then don't use a suffix -->
		<condition property="app.ver.suffix" value="">
			<equals arg1="${app_ver_suffix}" arg2=""/>
		</condition>
		<!-- Else, use the normal app_ver_suffix as the suffix -->
		<condition property="app.ver.suffix" value="-${app_ver_suffix}">
			<not><isset property="app.ver.suffix"/></not>
		</condition>
		<property name="app.version" value="${app_ver_major}.${app_ver_minor}.${app_ver_tiny}${app.ver.suffix}"/>
		<echo message="Building Architect version: ${app.version}"> </echo>
		<property name="dist.dir" value="dist/architect-${app.version}"/>
		<mkdir dir="${dist.dir}"/>
		<!-- The directory where junit HTML reports are generated.
			 Other report files could eventually be placed here too. -->
		<property name="reports" value="${dist.dir}/reports"/>
	 	<mkdir dir="${reports}"/>
	</target>
	
	<!-- The routine tests that work can get listed here.
	*** Right now findbugs runs out of memory
	-->
	<target name="alltests" depends="junit,pmd"
		description="Runs all working test targets"
	/>

	<!-- A target to configure the Clover environment. This
		needs to be executed if any Clover features are to
		be used.
		
		To setup Clover:
		1) Download "Clover for Ant" from Cenqua at 
				http://www.cenqua.com/download.jspa
		2) Extract Clover to any directory you wish
			(NOTE: There is a directory set aside for Clover
				it is ext-tools-home/clover)
		3) Obtain a liscense file from Cenqua and
				place it in the (CLOVER_HOME)/lib
				directory with the clover.jar file
		4) Add the clover.jar file to the classpath
			for the ant build
			
		To generate an HTML report run the clover.report
		target.
		
		Reports are sent to the reports directory but you can 
		choose your own directory by changing the 'outfile' 
		attribute of the 'current' tage in the clover.html 
		target.-->
	<target name="with.clover" description="Activates Clover">
	    <clover-setup initString="mycoverage.db" source="1.5"
	    	flushpolicy="threaded" flushinterval="500">
	    	<!-- This fileset includes all source files that are not
	    	tests because we do not want to see the coverage results
	    	of files in the test suite. -->
	    	<fileset dir="${src}" casesensitive="yes">
	    	    <include name="**/*.java"/>
	    	    <exclude name="**/*Test*"/>
	    	</fileset>
	    </clover-setup>
	</target>

	<target name="clover.test.and.report" depends="with.clover, clover.junit, clover.html"
		description="A simple target to initialize Clover, run the test suite
		and generate an HTML report">
	</target>
	
	<!-- A target to run the junit tests with clover report
		generation enabled -->
	<target name="clover.junit" depends="with.clover,junit" 
		description="Run the tests with Clover report generation">
	</target>
	
	<!-- A target that generates a Clover report in html
		format. 
		Note: The test suite must be run with clover
		enabled BEFORE this is run. They CANNOT be run in the
		same Ant session.
		Also, the ouput directory is specified by the value of
		-->
	<target name="clover.html" depends="init, with.clover"
		description="Generates HTML coverage report based on previous 
		Clover-enabled test run (clover.junit)"
		>
	    <clover-report>
	        <current outfile="${reports}/clover">
	            <format type="html"/>
		    	<fileset dir="${src}" casesensitive="yes">
		    	    <include name="**/*.java"/>
		    	    <exclude name="**/*Test*"/>
		    	</fileset>
	        </current>
	    </clover-report>
	</target>

	<target name="pmd"
		description="Runs the PMD code checking tool, saving results to a file."
		>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
			classpath="${pmd.jar}"/>
		<property name="pmd-results" value="pmd-ant-results.txt"/>
		<pmd shortFilenames="true" targetjdk="1.5">
			<ruleset>basic,imports</ruleset>
			<formatter type="text" toFile="${pmd-results}"/>
			<fileset dir="${src}">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
		<echo message="PMD completed, output is in ${pmd-results}."/>
	</target>

	<target name="pmd-cpd"
		description="Runs the PMD Copy/Paste Detection tool, and saves results to a file">
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"
			classpath="${pmd.jar}"/>
		<property name="cpd-results" value="cpd-ant-results.txt"/>
		<cpd minimumTokenCount="120" outputFile="cpd-report.txt" outputfile="${cpd-results}">
			<fileset dir="${src}">
				<include name="**/*.java"/>
				<exclude name="generated/**.java"/>
			</fileset>
		</cpd>
		<echo message="CPD completed, output is in  ${cpd-results}."/>
	</target>

	<target name="findbugs"
		description="Runs the FindBugs tool, outputs results to a text file"
		depends="compile">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
			classpath="${findbugs-ant.jar}"/>
		<findbugs home="${findbugs.home}"
			output="text"
			outputFile="findbugs-ant-results.txt"
			reportLevel="low"
			jvmargs="-Xmx256m">  <!-- FindBugs can use up a lot of memory, so adjust the JVM memory here-->
			<class location="${build}" />
			<sourcePath path="${src}" />
			<!-- Classes needed by our code but that we don't want tested -->
			<auxClasspath path="${pmd.jar}" />
			<systemProperty name="findbugs.maskedfields.locals" value='true'/>
		</findbugs>
	</target>

	<!-- Runs the Business and Auto test suites. The Swing UI test suite is
	 	 not run because it fails randomly -->
	<target name="junit" depends="compile,compile-tests">
		<property name="reports.junit" value="${reports}/junit"/>
		<mkdir dir="${reports.junit}"/>
		<!-- Output all System.out and System.err messages -->
	   <junit printsummary="withOutAndErr">
	       <classpath><path refid="test.classpath"/></classpath>
	       <test name="ca.sqlpower.ArchitectBusinessTestSuite" todir="${reports.junit}"/>
           <test name="ca.sqlpower.ArchitectAutoTests" todir="${reports.junit}"/>
	   	   <formatter type="xml"/>
	   </junit>
		<!-- Generate HTML report -->
		<junitreport todir="${reports.junit}">
		  <fileset dir="${reports.junit}">
		    <include name="TEST-*.xml" />
		  </fileset>
		  <report todir="${reports.junit}" />
		</junitreport>
	</target>
	
	<!-- Compiles the application source files -->
	<target name="compile" depends="init,copyfiles">
		<javac srcdir="${src}" destdir="${build}"
			classpathref="compile.classpath"
			debug="true" deprecation="true"
			>
         </javac>
	</target>

	<!-- Compiles the regression test suite -->
	<target name="compile-tests" depends="compile">
		<javac srcdir="regress" destdir="${build}"
			classpathref="test.classpath"
			debug="true" deprecation="true"
			>
		</javac>
	</target>

    <!-- copies non-source files that need to be in the architect.jar. -->
	<target name="copyfiles" depends="init">
		<mkdir dir="${build}/icons"/>
        <copy todir="${build}/icons">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>
        <copy todir="${build}/icons/famfamfam">
			<fileset dir="src/icons/famfamfam">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>
		<!-- copies the template log4j config file into the build dir -->
		<copy tofile="${build}/log4j.properties"
			file="src/log4j.properties.example"/>
		<copy tofile="${build}/default_database_types.ini"
					file="src/default_database_types.ini"/>
    </target>

	<!-- DOCUMENTATION
		There are THREE main documentation targets, all built from the
		docbook XML file docs/PowerArchitectUsersGuide:
			help - JavaHelp (jarred and shipped)
			html - for quick viewing on our web site
			PDF - because we can :-)
	-->

	<!-- NOTE: All XSLT steps currently require xalan on classpath since JDK1.5 is behind -->
	<path id="docbookclasspath">
		<fileset dir="doc/tools/xalan">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="userguide" depends="help,pdf" description="Creates user guide in HTML and PDF">
	</target>

	<!-- Create an intermediate docbook document - for use both by help and html -
	with no width attributes on the images (the Swing HTML browser chokes
	when there is width but no height in an image tag)
	-->
	<target name="xslt-stripwidths">
		<xslt
			style="doc/tools/strip-width.xsl"
			in="doc/PowerArchitectUserGuide.xml"
			out="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Build the Help (JavaHelp, HTML-based format).
	 ** Note that at this time you must NOT have spaces in your
	 ** path (e.g., an Eclipse Workspace under "Documents and Settings"
	 ** will fail out because it changes spaces in filenames to %20.
	 -->
	<target name="help" depends="checkBuildPath, xslt-stripwidths" description="Create JavaHelp">
		<mkdir dir="${build}/help"/>
		<!-- This XSLT element is what's causing the problem with the
			directories with spaces not working. It outputs the results
			to a new directory with spaces replaced with '%20'-->
		<xslt
			style="doc/tools/xslt/javahelp/javahelp.xsl"
			in="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			out="${build}/help/zzz"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Index it I: limited-terms index: created manually, just copy it,
		 *** overwriting empty one that DocBook Javahelp made.
		 -->
		<copy file="doc/jhelpidx.xml" todir="${build}/help" overwrite="true"/>

		<!-- Index it II: full text search -->
		<!-- DO NOT USE as it seems to have a built-in assumption
		 *** that the help is all in one file.
		<java classname="com.sun.java.help.search.Indexer"
			classpath="lib/jhall.jar"
			fork="true" failonerror="true">
			<arg value="${build}/help"/>
		</java>
		<mkdir dir="${build}/help/JavaHelpSearch"/>
		<move todir="${build}/help/JavaHelpSearch">
			<fileset dir="JavaHelpSearch" includes="**"/>
		</move>
		-->
		<!-- So, remove the search view from the JavaHelp config -->
		<replace file="${build}/help/jhelpset.hs" value="">
			<replacetoken><![CDATA[<view><name>Search</name><label>Search</label><type>javax.help.SearchView</type><data engine="com.sun.java.help.search.DefaultSearchEngine">JavaHelpSearch</data></view>]]></replacetoken>
		</replace>

		<!-- Add the Favorites/Bookmarks views into the JavaHelp Config -->
		<replace file="${build}/help/jhelpset.hs"
			token="jhelpidx.xml&lt;/data>&lt;/view>&lt;/helpset>"
			value="jhelpidx.xml&lt;/data>&lt;/view>&lt;view>&lt;name>favorites&lt;/name>&lt;label>Favorites&lt;/label>&lt;type>javax.help.FavoritesView&lt;/type>&lt;/view>&lt;/helpset>"/>

		<!-- Copy the images and icons; the DocBook files have
			these horrid "src/" and "doc/" paths prepended
			so we have to preserve these here -->
		<mkdir dir="${build}/help/doc/images"/>
		<copy todir="${build}/help/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>

		<mkdir dir="${build}/help/src/icons"/>
		<copy todir="${build}/help/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>

		<!-- Jar the whole mess up and add to working classpath -->
		<jar file="${build}/architecthelp.jar" basedir="${build}/help" update="false">
		</jar>
	</target>

	<!-- Build the HTML -->
	<target name="html" depends="checkBuildPath, xslt-stripwidths" description="Create user guide in HTML">
		<mkdir dir="${build}/ca/sqlpower/architect/doc/" />

		<xslt
			style="doc/tools/xslt/html/chunk.xsl"
			in="${java.io.tmpdir}/PowerArchitectUserGuide-nowidth.xml"
			out="${build}/ca/sqlpower/architect/doc/PowerArchitectUserGuide.html"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Warning: This is an extremely evil hack to get the product out the door!
		              See bugzilla 1195 for details -->
		<mkdir dir="${build}/ca/sqlpower/architect/doc/doc/images" />
		<copy todir="${build}/ca/sqlpower/architect/doc/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>
		<mkdir dir="${build}/ca/sqlpower/architect/doc/src/icons" />
		<copy todir="${build}/ca/sqlpower/architect/doc/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>
	</target>

	<!-- Convert User Manual from XML to FO -->
	<target name="fo" depends="init" description="Create user guide in XML Formatting Objects">
		<mkdir dir="${build}/doc/" />
        <xslt
			style="doc/tools/xslt/fo/docbook.xsl"
			in="doc/PowerArchitectUserGuide.xml"
			out="${build}/doc/PowerArchitectUserGuide-${app.version}.fo"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Finish it, from FO to PDF -->
	<target name="pdf" depends="fo" description="Create user guide in PDF">
		<path id="fop-classpath">
			<fileset dir="doc/tools/xalan">
			  <include name="*.jar"/>
			</fileset>
			<fileset dir="doc/tools/fop">
			  <include name="*.jar"/>
			</fileset>
		</path>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" classpathref="fop-classpath"/>
        <fop format="application/pdf" messagelevel="verbose" relativebase="true" >
			<fileset dir="${build}/doc/">
				<include name="*.fo"/>
			</fileset>
		</fop>

    </target>

    <!-- Creates a WebStart distribution under the webstart/ directory -->
	<target name="webstart_dist" depends="stage">
        <mkdir dir="webstart/lib"/>
		<jar destfile="webstart/lib/architect.jar" update="no"
			basedir="${build}" includes="ca/** icons/** log4j.properties"
			manifest="${build}/manifest">
		</jar>
        <copy todir="webstart/">
            <fileset dir="lib" includes="*.jar"/>
        </copy>

	</target>

    <target name="stage" depends="checkAntVersion,compile,userguide">
    	<mkdir dir="${dist.dir}" />
        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${staging.dir}/lib"/>
        <mkdir dir="${staging.dir}/jdbc"/>
    	<mkdir dir="${staging.dir}/doc"/>

    	<copy todir="${staging.dir}/lib">
    	    <fileset dir="lib" includes="*.jar"/>
    		<fileset dir="${build}" includes="architecthelp.jar" />
    	</copy>

    	<!-- This is an Ant 1.7 feature. To upgrade if using Eclipse 3.x,
    	     1. Download the latest Ant from http://ant.apache.org/bindownload.cgi
    	     2. Extract it somewhere
    	     3. Under window, preferences select Ant runtime in the tree
    	     4. Set the Ant home to be the folder that Ant was extracted to -->
    	<manifestclasspath property="architect.jar.classpath"
    	    	                       jarfile="${staging.dir}/architect.jar">
    	    		<classpath>
    		    		<pathelement path="${staging.dir}/jdbc"/>
    	    			<fileset dir="${staging.dir}/">
    	    				<include name="lib/*.jar"/>
    	    			</fileset>
    	    		</classpath>
    	    	 </manifestclasspath>

    	<manifest file="${build}/manifest">
    		<attribute name="Main-Class" value="ca.sqlpower.architect.swingui.ArchitectFrame"/>
    		<attribute name="Class-Path" value="${architect.jar.classpath}" />
    	</manifest>

    	<jar destfile="${staging.dir}/architect.jar" update="no"
    				basedir="${build}" includes="ca/** icons/** log4j.properties default_database_types.ini"
    				manifest="${build}/manifest">
    	</jar>
		<copy todir="${staging.dir}/jdbc">
		    <fileset dir="jdbc_drivers" includes="*.jar"/>
			<fileset dir="src" includes="default_database_types.ini"/>
	    </copy>
    	<copy todir="${staging.dir}/doc">
        	<fileset dir="${build}/doc" includes="*-${app.version}.pdf"/>
    	   	<fileset dir="${build}/doc" includes="*.txt"/>
    	</copy>
    	<copy todir="${staging.dir}/doc" file="doc/ReleaseNotes.txt"/>

    	<copy todir="${staging.dir}" file="LICENSE"/>

    	<!-- No point in signing until we have a certificate that's signed by a CA
    	<signjar alias="sqlpower" keystore="keystore" storepass="low_security" keypass="low_security">
    	   <fileset dir="webstart/lib"/>
    	</signjar>
    	-->
	</target>

	<target name="run" 
		description="Runs the Architect application with the Swing UI"
		depends="compile">
		<java fork="true" classname="ca.sqlpower.architect.swingui.ArchitectFrame" classpathref="test.classpath">
			<jvmarg value="-Dlog4j.configuration=log4j.properties"/>
		</java>
	</target>

	<target name="clean" depends="init">
		<delete dir="${build}"/>
		<delete><fileset dir="${dist.dir}" includes="lib,Power*Architect.app,architect.jar"/></delete>
		<delete dir="webstart/lib"/>
		<delete dir="${staging.dir}"/>
	</target>

	<target name="dist-clean" depends="clean">
		<delete dir="${dist.dir}" />
	</target>

	<path id="compile.classpath">
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="test.classpath">
		<pathelement location="${build}"/>
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="javadoc" 
		description="Generate the Javadoc documentation for the Architect API in the build directory"
		depends="compile">
		<mkdir dir="${dist.dir}/doc/api"/>
		<echo message="NOTE: If the javadoc command is not accessible from your PATH variable, then this target WILL fail."/>
		<javadoc sourcepath="${src}" destdir="${dist.dir}/doc/api"
			packagenames="ca.sqlpower.*"
			maxmemory="100m"
			windowtitle="ca.sqlpower.architect.* Power*Architect"
			Version="true" Author="true" Use="true"
			Overview="html/overview.html"
			classpathref="test.classpath"
			>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="ca/sqlpower/**" />
				<exclude name="regress/**"/>
			</packageset>
			<bottom><![CDATA[<i>Copyright &#169; 2003-2007 SQL Power Group Inc. <a href="http://www.sqlpower.ca/">www.sqlpower.ca</a>]]></bottom>
		</javadoc>
	</target>


	<target name="windows_installer" depends="stage">
		<izpack output="${dist.dir}/Architect-Setup-Windows-${app.version}.jar"
		        installerType="standard"
			    basedir="${installer.dir}"
		        izPackDir="${izpack.dir}/">

		<config><![CDATA[
			<installation version="1.0">
				<!-- comment -->
				<info>
					<appname>Power Architect</appname>
					<appversion>@{app.version}</appversion>
					<url>http://www.sqlpower.ca/</url>
					<javaversion>1.5</javaversion>
				</info>
				<guiprefs height="600" resizable="yes" width="800">
					<laf name="metouia">
						<os family="unix"/>
					</laf>
				</guiprefs>

				<locale>
					<langpack iso3="eng"/>
				</locale>
				<resources>
					<res id="Installer.image" src="../src/icons/architect.png"/>
					<res src="ArchitectShortcut.xml" id="shortcutSpec.xml"/>
					<res id="LicencePanel.licence" src="../LICENSE" />
				</resources>
				<panels>
					<panel classname="HelloPanel"/>
					<panel classname="LicencePanel"/>
					<panel classname="TargetPanel"/>
					<panel classname="InstallPanel"/>
					<panel classname="ShortcutPanel"/>
					<panel classname="SimpleFinishPanel"/>
				</panels>
				<packs>
					<pack name="Core" required="yes">
						<description>Architect Core Files</description>
						<fileset dir="../staging/" targetdir="$INSTALL_PATH">
							<include name="architect.jar"/>
						</fileset>
						<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
							<include name="*.jar"/>
						</fileset>
						<fileset dir="../staging/jdbc" targetdir="$INSTALL_PATH/jdbc">
							<include name="*.ini"/>
						</fileset>
						<fileset dir=".." targetdir="$INSTALL_PATH">
							<include name="../staging/LICENSE"/>
						</fileset>
						<fileset dir="." targetdir="$INSTALL_PATH">
							<include name="*.reg"/>
						</fileset>
						<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
							<include name="*.ico"/>
						</fileset>
						<parsable targetfile="${INSTALL_PATH}/architect_file_association.reg" type="windowsreg"/>
						<executable targetfile="regedit.exe" stage="postinstall" keep="true">
						   <args>
						     <arg value="\/s"/>
						     <arg value="$INSTALL_PATH/architect_file_association.reg"/>
					      </args>
					   </executable>
						<executable targetfile="regedit.exe" stage="uninstall" keep="true">
						   <args>
						     <arg value="\/s"/>
						     <arg value="$INSTALL_PATH/uninstall.reg"/>
					      </args>
					   </executable>
					</pack>
				</packs>
				<native type="izpack" name="ShellLink.dll"/>
			</installation>
			]]>
		</config>
		</izpack>
	</target>

	<target name="windows_jdbc_installer" depends="stage">
			<izpack output="${dist.dir}/Architect-Setup-Windows-jdbc-${app.version}.jar"
			        installerType="standard"
				    basedir="${installer.dir}"
			        izPackDir="${izpack.dir}/">

			<config><![CDATA[
				<installation version="1.0">
					<!-- comment -->
					<info>
						<appname>Power Architect</appname>
						<appversion>@{app.version}</appversion>
						<url>http://www.sqlpower.ca/</url>
						<javaversion>1.5</javaversion>
					</info>
					<guiprefs height="600" resizable="yes" width="800">
						<laf name="metouia">
							<os family="unix"/>
						</laf>
					</guiprefs>

					<locale>
						<langpack iso3="eng"/>
					</locale>
					<resources>
						<res id="Installer.image" src="../src/icons/architect.png"/>
						<res src="ArchitectShortcut.xml" id="shortcutSpec.xml"/>
						<res id="LicencePanel.licence" src="../LICENSE" />
					</resources>
					<panels>
						<panel classname="HelloPanel"/>
						<panel classname="LicencePanel"/>
						<panel classname="TargetPanel"/>
						<panel classname="InstallPanel"/>
						<panel classname="ShortcutPanel"/>
						<panel classname="SimpleFinishPanel"/>
					</panels>
					<packs>
						<pack name="Core" required="yes">
							<description>Architect Core Files</description>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="architect.jar"/>
							</fileset>
							<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
								<include name="*.jar"/>
							</fileset>
							<!-- the directory jdbc is referenced in the manifest as well as
								various targets. -->
							<fileset dir="../staging/jdbc" targetdir="$INSTALL_PATH/jdbc">
								<include name="*.jar"/>
								<include name="*.ini"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="LICENSE"/>
							</fileset>
							<fileset dir="." targetdir="$INSTALL_PATH">
								<include name="*.reg"/>
							</fileset>
							<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
								<include name="*.ico"/>
							</fileset>
							<parsable targetfile="${INSTALL_PATH}/architect_file_association.reg" type="windowsreg"/>
							<executable targetfile="regedit.exe" stage="postinstall" keep="true">
							   <args>
							     <arg value="\/s"/>
							     <arg value="$INSTALL_PATH/architect_file_association.reg"/>
						      </args>
						   </executable>
							<executable targetfile="regedit.exe" stage="uninstall" keep="true">
							   <args>
							     <arg value="\/s"/>
							     <arg value="$INSTALL_PATH/uninstall.reg"/>
						      </args>
						   </executable>
						</pack>
					</packs>
					<native type="izpack" name="ShellLink.dll"/>
				</installation>
				]]>
			</config>
			</izpack>
		</target>

	<target name="osx_adapter_jar" depends="checkBuildPath"
			description="Creates the osx_packaging_utils/osx_adapter.jar file (only works on OSX)">
		<javac srcdir="osx_packaging_utils"
   			   destdir="${build}"
			   includes="ca/sqlpower/architect/swingui/OSXAdapter.java"
			   />
		<jar destfile="osx_packaging_utils/osx_adapter.jar"
			 basedir="${build}"
			 includes="ca/sqlpower/architect/swingui/OSXAdapter.class"/>
	</target>

	<target name="osx_dist" depends="stage">
		<!-- The pre-compiled osx adapter class (it only compiles on OS X) -->
		<copy file="osx_packaging_utils/osx_adapter.jar" todir="${staging.dir}/lib"/>

		<!-- jarbundler is from sourceforge, defined near top of file -->
		<jarbundler dir="${staging.dir}"
           name="Power Architect"
           version="${app.version}"
           mainclass="ca.sqlpower.architect.swingui.ArchitectFrame"
           icon="src/icons/Power Architect.icns"
           jvmversion="1.5+"
           shortname="Architect"
           stubfile="osx_packaging_utils/PowerArchitectStub"
           vmoptions="-Xmx600m">
			<jarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<jarfileset dir="${staging.dir}" includes="architect.jar"/>
			<javafileset dir="${staging.dir}" includes="jdbc/*.ini"/>
			<extraclasspathfilelist dir="KICKME" files="jdbc"/>
		</jarbundler>

		<!-- XXX this is stupid. we should modify the jarbundler task to allow literal strings in the classpath -->
		<replace file="${staging.dir}/Power Architect.app/Contents/Info.plist"
				 token="${basedir}/KICKME"
				 value="$JAVAROOT" />
	</target>

	<target name="osx_jdbc_dist" depends="stage">
		<!-- The pre-compiled osx adapter class (it only compiles on OS X) -->
		<copy file="osx_packaging_utils/osx_adapter.jar" todir="${staging.dir}/lib"/>

		<!-- jarbundler is from sourceforge, defined near top of file -->
		<jarbundler dir="${staging.dir}"
           name="Power Architect JDBC"
           version="${app.version}.jdbc"
           mainclass="ca.sqlpower.architect.swingui.ArchitectFrame"
           icon="src/icons/Power Architect.icns"
           jvmversion="1.5+"
           shortname="Architect"
           stubfile="osx_packaging_utils/PowerArchitectStub"
           vmoptions="-Xmx600m">
			<jarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<jarfileset dir="${staging.dir}" includes="architect.jar"/>
			<!-- Add any jdbc drivers as resources the directory jdbc is referenced
					in the manifest as well as various targets. -->
			<javafileset dir="${staging.dir}" includes="jdbc/*.jar jdbc/*.ini"/>
			<extraclasspathfilelist dir="KICKME" files="jdbc"/>
		</jarbundler>

		<!-- XXX this is stupid. we should modify the jarbundler task to allow literal strings in the classpath -->
		<replace file="${staging.dir}/Power Architect JDBC.app/Contents/Info.plist"
				 token="${basedir}/KICKME"
				 value="$JAVAROOT" />

	</target>

	<!-- This target will only work on OS X (it needs the hdiutil command) -->

	<target name="osx_dmg" depends="osx_dist" if="isMac">
		<!-- What this basically does is:
                     hdiutil create -size 50m -fs HFS+ -volname "Power*Architect" RWArchitect.dmg
				     hdiutil attach RWArchitect.dmg
				     (copy architect.app over, position it, etc)
				     /Developer/Tools/SetFile -a V /Volumes/Power\*Architect/install_folder_background.png
				     hdiutil detach /Volumes/Power\*Architect/
				     rm Power_Architect-1.0.19.dmg
				     hdiutil convert -format UDCO -o Power_Architect-1.0.19.dmg RWArchitect.dmg
				  -->
		<copy file="osx_packaging_utils/RWArchitect.dmg.sparseimage" tofile="${staging.dir}/RWArchitect.dmg.sparseimage" overwrite="true" />
		<exec executable="hdiutil">
					<arg value="detach" />
					<arg value="/Volumes/Power*Architect" />
		</exec>
		<exec executable="hdiutil">
			<arg value="attach" />
			<arg value="${staging.dir}/RWArchitect.dmg.sparseimage" />
		</exec>
		<copy todir="/Volumes/Power*Architect/Power*Architect.app/" overwrite="true"  >
			<fileset dir="${staging.dir}/Power Architect.app"></fileset>
		</copy>
		<exec executable="chmod">
			<arg value="a+x"/>
			<arg value="/Volumes/Power*Architect/Power*Architect.app/Contents/MacOS/PowerArchitectStub"/>
		</exec>
		<exec executable="hdiutil">
			<arg value="detach" />
			<arg value="/Volumes/Power*Architect" />
		</exec>
		<delete file="${dist.dir}/Architect-OSX-${app.version}.dmg" />
		<exec executable="hdiutil">
			<arg value="convert"/>
			<arg value="${staging.dir}/RWArchitect.dmg.sparseimage"/>
			<arg value="-format"/>
			<arg value="UDCO"/>
			<arg value="-o"/>
			<arg value="${dist.dir}/Architect-OSX-${app.version}.dmg"/>
		</exec>

		<taskdef name="addLicenseToDMG"
				 classname="ca.sqlpower.architect.antbuild.AddLicenseToDMGTask"
			     classpath="build"/>
		<addLicenseToDMG
				dmgFile="${dist.dir}/Architect-OSX-${app.version}.dmg"
                licenseFile="${staging.dir}/LICENSE"
		        resourceTemplateFile="osx_packaging_utils/sla_template.r"/>
    </target>

	<target name="osx_jdbc_dmg" depends="osx_jdbc_dist" if="isMac">
			<!-- hdiutil create -size 50m -fs HFS+ -volname "Power*Architect" RWArchitect.dmg
					     hdiutil attach RWArchitect.dmg
					     (copy architect.app over, position it, etc)
					     /Developer/Tools/SetFile -a V /Volumes/Power\*Architect/install_folder_background.png
					     hdiutil detach /Volumes/Power\*Architect/
					     rm Power_Architect-1.0.19.dmg
					     hdiutil convert -format UDCO -o Power_Architect-1.0.19.dmg RWArchitect.dmg
					  -->
			<copy file="osx_packaging_utils/RWArchitect.dmg.sparseimage" tofile="${staging.dir}/RWArchitect.dmg.sparseimage" overwrite="true" />
			<exec executable="hdiutil">
						<arg value="detach" />
						<arg value="/Volumes/Power*Architect" />
			</exec>
			<exec executable="hdiutil">
				<arg value="attach" />
				<arg value="${staging.dir}/RWArchitect.dmg.sparseimage" />
			</exec>
			<delete dir="/Volumes/Power*Architect/Power*Architect.app/Contents/Resources/Java"/>
			<copy todir="/Volumes/Power*Architect/Power*Architect.app/" overwrite="true"  >
				<fileset dir="${staging.dir}/Power Architect JDBC.app"></fileset>
			</copy>
			<exec executable="chmod">
				<arg value="a+x"/>
				<arg value="/Volumes/Power*Architect/Power*Architect.app/Contents/MacOS/PowerArchitectStub"/>
			</exec>
			<exec executable="hdiutil">
				<arg value="detach" />
				<arg value="/Volumes/Power*Architect" />
			</exec>
			<delete file="${dist.dir}/Architect-OSX-jdbc-${app.version}.dmg" />
			<exec executable="hdiutil">
				<arg value="convert"/>
				<arg value="${staging.dir}/RWArchitect.dmg.sparseimage"/>
				<arg value="-format"/>
				<arg value="UDCO"/>
				<arg value="-o"/>
				<arg value="${dist.dir}/Architect-OSX-jdbc-${app.version}.dmg"/>
			</exec>

			<taskdef name="addLicenseToDMG"
					 classname="ca.sqlpower.architect.antbuild.AddLicenseToDMGTask"
				     classpath="build"/>
			<addLicenseToDMG
					dmgFile="${dist.dir}/Architect-OSX-jdbc-${app.version}.dmg"
	                licenseFile="${staging.dir}/LICENSE"
			        resourceTemplateFile="osx_packaging_utils/sla_template.r"/>
	    </target>

	<target name="osx_tgz" depends="osx_dist" if="isNotMac">
		<tar destfile="${dist.dir}/Architect-OSX-${app.version}.tar.gz"
					compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Power Architect.app/**"/>
			<tarfileset dir="${staging.dir}" includes="jdbc/*.ini"/>
		</tar>
	</target>

	<target name="osx_jdbc_tgz" depends="osx_jdbc_dist" if="isNotMac">
		<tar destfile="${dist.dir}/Architect-OSX-jdbc-${app.version}.tar.gz"
					compression="gzip">
			<tarfileset dir="${staging.dir}" includes="Power Architect JDBC.app/**"/>
			<tarfileset dir="${staging.dir}" includes="jdbc/*"/>
		</tar>
	</target>

	<!-- Build a "generic" (e.g., UNIX) install that users will just un-tar -->
    <target name="generic_install" depends="stage">
		<tar destfile="${dist.dir}/Architect-generic-${app.version}.tar.gz"
			compression="gzip">
			<tarfileset
			    prefix="architect-${app.version}"
				dir="${staging.dir}"
				includes="LICENSE, lib/*.jar, architect.jar, jdbc/*.ini" />
			<tarfileset
			    prefix="architect-${app.version}"
				dir="doc"
				includes="README.generic" />
		</tar>
    </target>

    <target name="generic_jdbc_install" depends="stage">
		<tar destfile="${dist.dir}/Architect-generic-jdbc-${app.version}.tar.gz"
			compression="gzip">
			<tarfileset
			    prefix="architect-${app.version}"
				dir="${staging.dir}"
				includes="LICENSE, lib/*.jar, architect.jar, jdbc/*.ini, jdbc/*.jar" />
			<tarfileset
			    prefix="architect-${app.version}"
				dir="doc"
				includes="README.generic" />
		</tar>
    </target>

	<target name="source_tgz" depends="init"
		description="Builds a source tarball of the Architect">
		<tar destfile="${dist.dir}/Architect-src-${app.version}.tar.gz"
			 compression="gzip" longfile="gnu">
			<tarfileset dir="."
				prefix="architect-src-${app.version}"
				excludes="log4j.properties,build.properties,user.properties,build/**,**/*.bak,**/*~,**/TEST*,architect.log*,**/.fbwarnings,deploy/**,.fbprefs,staging/**,antbuild/**,dist/**,findbugs-ant-results.txt,pmd-ant-results.txt,cpd-ant-results.txt"/>
		</tar>
	</target>
	
	<target name="jdbc_dist" depends="windows_jdbc_installer,generic_jdbc_install,osx_jdbc_tgz,osx_jdbc_dmg" />
	<target name="no_jdbc_dist" depends="windows_installer,generic_install,osx_tgz,osx_dmg" />

	<target name="dist" depends="jdbc_dist,no_jdbc_dist,javadoc,junit"
	        description="Builds Architect Distribution for all supported platforms to dist/architect-version/*">
		<echo>Don't forget to turn off all the debugging in log4j.properties!</echo>
		<mkdir dir="${dist.dir}/doc"/>
		<copy todir="${dist.dir}/doc" overwrite="true">
			<fileset dir="${staging.dir}/doc">
				<include name="*-${app.version}.pdf"/>
				<include name="*.txt"/>
			</fileset>
		</copy>
	    <get dest="${dist.dir}/index.html" src="http://www.sqlpower.ca/page/architect_download_template"/>
		<replace file="${dist.dir}/index.html">
			<replacefilter token="&lt;head&gt;" value="&lt;head&gt;&lt;base href=&quot;http://www.sqlpower.ca/&quot;/&gt;"/>
			<replacefilter token="@@app_version" value="${app.version}"/>
		</replace>
		<echo>Did you forget to turn off all the debugging in log4j.properties?!</echo>
	</target>
		
	<!-- Some of the Ant targets in this build.xml require Ant 1.7. 
		 To upgrade if using Eclipse 3.x,
	     1. Download the latest Ant from http://ant.apache.org/bindownload.cgi
	     2. Extract it somewhere
	     3. Under window, preferences select Ant runtime in the tree
	     4. Set the Ant home to be the folder that Ant was extracted to -->
	<target name="checkAntVersion" description="Ensure that we're running ant 1.7">
		<echo message="Checking Ant version. Using ${ant.version}"/>
		<echo message="Note: This build script requires Ant 1.7 or newer."/>
		<fail message="This build script requires Ant 1.7 or newer">
			<condition>
				<not>
					<antversion atleast="1.7.0"/>
				</not>
			</condition>
		</fail>
	</target>
	
	<!-- This is needed to prevent a problem with DocBook help file generation 
		 in which the XSLT replaces the spaces in the path name with '%20', and
		 doesn't convert it back when saving the files. It looks like this is
		 related to the DocBook chunking functionality.
		 We don't know of any good way to fix this yet, so we have this
		 check for the time being.-->
	<target name="checkBuildPath" 
		description="Ensure the build path contains no spaces.">
		<echo message="Note: Your build path cannot contain any spaces at this point because of a problem with help file generation."/>
		<echo message="Checking build path..."/>
		<!-- Check if the build path is absolute. If so, set buildPath -->
		<condition property="buildPath" value="${build}">
			<or>
				<!-- Check for Windows style absolute pathnames-->
				<and>
					<or>
						<!-- pathname with backslash only -->
						<matches string="${build}" pattern="^\\{1}.*"/>
						<!-- pathname with drive letter -->
						<matches string="${build}" pattern="^[a-zA-Z]{1}:\\.*"/>
					</or>
					<os family="windows"/>
				</and>
				<!-- Check for Unix style absolute pathnames -->
				<and>
					<matches string="${build}" pattern="^//{1}.*"/>
					<not>
						<os family="windows"/>
					</not>
				</and>
			</or>
		</condition>
		<!-- Check if buildPath is set. If not, then it's a relative buildpath-->
		<condition property="buildPath" value="${basedir}\${build}">
			<and>
				<not>
					<isset property="buildPath"/>
				</not>
				<os family="windows"/>
			</and>
		</condition>
		<!-- Check if buildPath is set. If not, then it's not a windows buildpath (i.e. doesn't use '\')-->
		<condition property="buildPath" value="${basedir}/${build}">
			<not>
				<isset property="buildPath"/>
			</not>
		</condition>
		<echo message="Your build path is ${buildPath}"/>
		<!-- Now check the build path for spaces -->
	    <fail message="Your build path MUST NOT contain any spaces. See the file 'build.properties.example' to see how to set property 'build' to an absolute pathname that does not contain any spaces">
	    	<condition>
				<contains string="${buildPath}" substring=" "/>
	    	</condition>
		</fail>
	</target>
</project>
